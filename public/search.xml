<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>1.9 hexo 实现本地图片加载</title>
      <link href="/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-9-hexo-%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
      <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-9-hexo-%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了1.9 hexo 实现本地图片加载，要知道原作官方提供的hexo-asset-image，根本不能满足自己的需要，所以这里是基于原作的代码进行修改实现，原作并未其提供的代码做出解释说明，本文将对更改后能实现本地图片加载的代码进行解释，并有针对性的对后来遇到问题的，或者可以给你们提供二次修改说明的解释并提醒。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><p><a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">hexo-asset-image</a>,这是原作者提供的代码，有一个特别致命的问题，是每次hexo g,后，需要手动将图片一张张对应复制到public文件夹中对应你的博文对应生成的文件夹的路径下才可以实现，本地图片显示。那么问题来了，我如果写了很多博文，需要每次复制如此多的图片到不同博文对应生成的文件夹中去。太麻烦了</p><ul><li>若，我是写的书的格式，分章分节，一章我有10几节，那一个文件一个文件复制太麻烦了。</li></ul><h1 id="一、要解决的问题"><a href="#一、要解决的问题" class="headerlink" title="一、要解决的问题"></a>一、要解决的问题</h1><ul><li>我们要解决既要加载本地图库在我们的站点显示</li><li>又不想一个博文一个博文区分开了分别拷贝对应图片到public文件夹中</li></ul><blockquote><p>假设：如果我们能够把每章节的很多文章的不同图片放到该章节的图库文件夹中，这样每章就一个图库文件，我们把图库（image1文件夹）直接复制到（source文件夹下），然后直接hexo clean &amp;&amp; hexo g 就可以，这样不用手动添加文件到问文件夹中。</p></blockquote><h1 id="二、操作"><a href="#二、操作" class="headerlink" title="二、操作"></a>二、操作</h1><h2 id="2-1-下载原作者的文件，然后修改原文件代码"><a href="#2-1-下载原作者的文件，然后修改原文件代码" class="headerlink" title="2.1 下载原作者的文件，然后修改原文件代码"></a>2.1 下载原作者的文件，然后修改原文件代码</h2><ul><li>安装原作者的<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">hexo-asset-image</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><h2 id="2-2-原始作者的代码如下（还未经过博主修改前的代码）"><a href="#2-2-原始作者的代码如下（还未经过博主修改前的代码）" class="headerlink" title="2,2 原始作者的代码如下（还未经过博主修改前的代码）"></a>2,2 原始作者的代码如下（还未经过博主修改前的代码）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.permalink;</span><br><span class="line"><span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line"><span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line"><span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line"><span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-3-修改原作代码"><a href="#2-3-修改原作代码" class="headerlink" title="2.3 修改原作代码"></a>2.3 修改原作代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="comment">//获取对应链接的'/'分开的某部分</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="comment">//调用上面的函数，取link链接的第三个'/'位置的数组下标值，做下面取链接的首地址区间。</span></span><br><span class="line"><span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">    <span class="comment">//取link链接的最后一个'/'，做下面取链接的尾地址区间。</span></span><br><span class="line"><span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//取link连接中我们认为有用的地址部分。</span></span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line"><span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line"><span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">              <span class="comment">//取图片的名字，比如 x.png</span></span><br><span class="line">  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">  <span class="comment">//$(this).attr('src', config.root + link + src);</span></span><br><span class="line">  <span class="comment">//notes: src is image name,and config.root is localhost:port,the middle cahr string is my local image Repository</span></span><br><span class="line">  <span class="comment">//这我们做判断，判断原始link链接的前3个字是不是“第一章”,如果是，我们将link地址写成'image1'，（image1是我们存放第一章所有图片的图库文件夹）</span></span><br><span class="line">              <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第一章"</span>)&#123;</span><br><span class="line"><span class="comment">//第一章的所有图片放到这个文件夹下</span></span><br><span class="line">link=<span class="string">"image1/"</span>;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the fist capture!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//这我们做判断，判断原始link链接的前3个字是不是“第二章”,如果是，我们将link地址写成'image2'，（image2是我们存放第二章所有图片的图库文件夹）</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第二章"</span>)&#123;</span><br><span class="line">link=<span class="string">"image2/"</span>;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the second capture!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第三章"</span>)&#123;</span><br><span class="line">link=<span class="string">"image3/"</span>;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the third capture!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第四章"</span>)&#123;</span><br><span class="line">link=<span class="string">"image4/"</span>;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the fourth capture!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第五章"</span>)&#123;</span><br><span class="line">link=<span class="string">"image5/"</span>;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the fifth capture!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第六章"</span>)&#123;</span><br><span class="line">link=<span class="string">"image6/"</span>;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the sixth capture!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第七章"</span>)&#123;</span><br><span class="line">link=<span class="string">"image7/"</span>;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the seventh capture!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//$(this).attr('src', config.root + "image1/" + src);</span></span><br><span class="line">              <span class="comment">//这里我们做字符串的拼接，将最终输出的图片链接地址改为：config.root + link + src</span></span><br><span class="line">              <span class="comment">//其中config.root 是'/'表示根目录。link使我们的图库相对根目录的位置。src是图片的名字: x.png或其他格式图片</span></span><br><span class="line">  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">              <span class="comment">//终端上打印调试信息，供自己调试，是否每个图片输出地址是正确的。</span></span><br><span class="line">  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + <span class="string">"=="</span> + link + <span class="string">"=="</span> + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-3-修改你站点文件根目录的-config-yml文件的配置信息"><a href="#2-3-修改你站点文件根目录的-config-yml文件的配置信息" class="headerlink" title="2.3 修改你站点文件根目录的_config.yml文件的配置信息"></a>2.3 修改你站点文件根目录的_config.yml文件的配置信息</h2><p>找到如下条，将默认的false改为true,注意_config.yml不是你的主题文件家中的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true # local image to url,revise true</span><br></pre></td></tr></table></figure><h2 id="2-4-我的博文目录格式如下图片所示："><a href="#2-4-我的博文目录格式如下图片所示：" class="headerlink" title="2.4 我的博文目录格式如下图片所示："></a>2.4 我的博文目录格式如下图片所示：</h2><p><img src="/image1/hexo_image1.png" alt="hexo_我的目录"></p><h2 id="2-5-将你的的博文直接放到你站点根目录下的：source-gt-post文件夹下，如下图"><a href="#2-5-将你的的博文直接放到你站点根目录下的：source-gt-post文件夹下，如下图" class="headerlink" title="2.5 将你的的博文直接放到你站点根目录下的：source-&gt;_post文件夹下，如下图"></a>2.5 将你的的博文直接放到你站点根目录下的：source-&gt;_post文件夹下，如下图</h2><p><img src="/image1/hexo_image2.png" alt="hexo_我的目录"></p><h2 id="2-6-将你的所有章节的图库文件夹直接放到source文件夹中即可"><a href="#2-6-将你的所有章节的图库文件夹直接放到source文件夹中即可" class="headerlink" title="2.6 将你的所有章节的图库文件夹直接放到source文件夹中即可"></a>2.6 将你的所有章节的图库文件夹直接放到source文件夹中即可</h2><p>如图：</p><p><img src="/image1/hexo_image3.png" alt="hexo_我的目录"></p><h1 id="三、Hexo手机页面优化"><a href="#三、Hexo手机页面优化" class="headerlink" title="三、Hexo手机页面优化"></a>三、Hexo手机页面优化</h1><p>文件路径</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">站点根目录/themes/yelee/source/css/_partial/mobile-slider.styl</span><br></pre></td></tr></table></figure><p>修改mobile-slider.styl文件内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#viewer&#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    z-index: 1000000;</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">#viewer-box&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    position: relative;</span><br><span class="line">    color: #ccc;</span><br><span class="line">    -webkit-transform: translate3d(-100%, 0, 0 );</span><br><span class="line">    -webkit-transition: -webkit-transform .25s ease-in-out;</span><br><span class="line">    .viewer-box-l&#123;</span><br><span class="line">        background: rgba(20,20,20,1);</span><br><span class="line">        width: 80%;</span><br><span class="line">        height: auto;</span><br><span class="line">        flex-grow: 0;</span><br><span class="line">        min-width: 8em;</span><br><span class="line">        max-width: 23em;</span><br><span class="line">        .viewer-box-wrap&#123;</span><br><span class="line">//revise the moble menu</span><br><span class="line">            margin: 20px 10px 0px 60px;</span><br><span class="line">        &#125;</span><br><span class="line">        .viewer-title&#123;</span><br><span class="line">            line-height: 32px;</span><br><span class="line">            &amp;:before&#123;</span><br><span class="line">                content: "";</span><br><span class="line">                width: 6px;</span><br><span class="line">                height: 6px;</span><br><span class="line">                border: 1px solid #999;</span><br><span class="line">                -webkit-border-radius: 10px;</span><br><span class="line">                border-radius: 10px;</span><br><span class="line">                background: #0000cc;</span><br><span class="line">                display: inline-block;</span><br><span class="line">                margin-right: 10px;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .viewer-div&#123;</span><br><span class="line">            border-bottom: 1px dotted #666;</span><br><span class="line">            padding-bottom: 13px;</span><br><span class="line">            line-height: 20px;</span><br><span class="line">            &amp;:last-child&#123;</span><br><span class="line">                border-bottom: none;</span><br><span class="line">            &#125;</span><br><span class="line">            .switch-friends-link&#123;</span><br><span class="line">                line-height: 20px;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .viewer-box-r&#123;</span><br><span class="line">        flex-grow: 1</span><br><span class="line">        width: auto</span><br><span class="line">        height: auto</span><br><span class="line">        background: rgba(0,0,0,0)</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            cursor: w-resize</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#viewer-box.anm-swipe&#123;</span><br><span class="line">    -webkit-transform:  translate3d(0, 0, 0);</span><br><span class="line">    .viewer-box-r&#123;</span><br><span class="line">        background: rgba(0,0,0,0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.hide&#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line">#viewer-box .viewer-list&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    height: 100%;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.1.2 最大熵模型</title>
      <link href="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-2-1-2-%E6%9C%80%E5%A4%A7%E7%86%B5%E6%A8%A1%E5%9E%8B/"/>
      <url>/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-2-1-2-%E6%9C%80%E5%A4%A7%E7%86%B5%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本篇文章笔记总结来自网络和书本，引用部分都有来源，内容主要介绍最大熵相关实际应用搞得入门例子，很简单，但是能说明最大熵的原理相关。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="2-1-2-隐马尔科夫HMM"><a href="#2-1-2-隐马尔科夫HMM" class="headerlink" title="2.1.2 隐马尔科夫HMM"></a>2.1.2 隐马尔科夫HMM</h1><p>在讲HMM前先看看什么是熵的概念</p><h2 id="一、什么是熵-Entropy"><a href="#一、什么是熵-Entropy" class="headerlink" title="一、什么是熵(Entropy)"></a>一、什么是熵(Entropy)</h2><p>信息熵的概念这个得从 <strong>热熵</strong> 开始说起，信熵是香农老先生从热力学引进来的，为了表示把信息中排除了冗余后的平均信息量称为“信息熵”。</p><ul><li>热力学中的热熵是表示分子状态混乱程度的物理量。香农用信息熵的概念来描述信源的不确定度。</li></ul><h3 id="1-1-热力学中–热熵"><a href="#1-1-热力学中–热熵" class="headerlink" title="1.1 热力学中–热熵"></a>1.1 热力学中–热熵</h3><p>从能量角度来看,熵定律意味着自然进行的能量转化过程总是由有序度高的能量向有序度低的能量转化,这个过程必定朝着熵增加的方向进行。</p><p>高温物体所有分子的平均能量要高于低温物体,所以相接触时总是从高温物体向低温物体传递热量,因为碰撞使它们的状态向平衡过渡,系统才会稳定;</p><p>热熵是向着熵增大的方向进行。从宇宙形成到地球诞生以及地球生命的形成,热熵一直有缓慢变大的趋势。</p><p><img src="/image2/hotShang_1.1.jpeg" alt="熵增"></p><h4 id="热熵改变是指在某个空间内热量分布的变化。"><a href="#热熵改变是指在某个空间内热量分布的变化。" class="headerlink" title="热熵改变是指在某个空间内热量分布的变化。"></a>热熵改变是指在某个空间内热量分布的变化。</h4><ul><li><p>1、在热力学中熵是对热量状态的描述，空间内热量分布差异越大则熵越小，做功的能力越强；空间内热量分布差异越小则熵越大，做功的能力越弱。热熵改变是指在某个空间内热量分布的变化，熵越大则热量分布的差异越小。正常情况下熵会从小到大的变化，最终熵达到最大而呈热寂。</p></li><li><p>2、根据热力学第二定律，作为一个“孤立”的系统，宇宙的熵会随着时间的流逝而增加，由有序向无序，当宇宙的熵达到最大值时，宇宙中的其他有效能量已经全数转化为热能，所有物质温度达到热平衡。这种状态称为热寂。这样的宇宙中再也没有任何可以维持运动或是生命的能量存在。</p></li><li>3、热熵改变的本质是热量分布由有序向无序发展，所以也可以看成系统混乱程度的改变。</li><li>4、熵最初是根据热力学第二定律引出的一个反映自发过程不可逆性的物质状态参量。热力学第二定律是根据大量观察结果总结出来的规律，有下述表述方式：热量总是从高温物体传到低温物体，不可能作相反的传递而不引起其他的变化；功可以全部转化为热，但任何热机不能全部地，连续不断地把所接受的热量转变为功；在孤立系统中，实际发生过程总使整个系统的熵值增大，此即熵增原理。 <blockquote><p>简单总结：热熵是熵增的过程，热量由有序的状态，转移，或是机械能，或是向其他低温物体转移，产生的影响是，最终达到系统平衡的目的，但也使得整个系统不再是以前清晰的状态，相反是变成了另一种混乱的状态，可以这样白话理解。</p></blockquote></li></ul><h3 id="1-2-信息论中的信息熵–信熵"><a href="#1-2-信息论中的信息熵–信熵" class="headerlink" title="1.2 信息论中的信息熵–信熵"></a>1.2 信息论中的信息熵–信熵</h3><ul><li>香农用信息熵的概念来描述信源的不确定度。</li></ul><h4 id="信息量"><a href="#信息量" class="headerlink" title="信息量"></a>信息量</h4><p>信息量：一个事件发生的概率越小，信息量越大，所以信息量应该为概率的减函数，对于相互独立的两个事有p(xy)=p(x)p(y)，对于这两个事件信息量应满足h(xy)=h(x)+h(y)，那么信息量应为对数函数：</p><p><img src="/image2/HMM_xinxiL.png" alt="信息量"></p><h4 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h4><p>根据Charles H. Bennett对Maxwell’s Demon的重新解释，对信息的销毁是一个不可逆过程，所以销毁信息是符合热力学第二定律的。而产生信息，则是为系统引入负（热力学）熵的过程。所以信息熵的符号与热力学熵应该是相反的。</p><ul><li>假设离散随机变量X的概率分布为P(x)，则其熵为：</li></ul><p><img src="/image2/hotShang_1.2.jpeg" alt="熵增"></p><p>H(x) = E[I(xi)] = E[ log(2,1/p(xi)) ] = -∑p(xi)log(2,p(xi)) (i=1,2,..n)</p><p>其中，x表示随机变量，与之相对应的是所有可能输出的集合，定义为符号集,随机变量的输出用x表示。P(x)表示输出概率函数。<strong>变量的不确定性越大，熵也就越大</strong> ，把它搞清楚所需要的信息量也就越大.</p><p>能量角度，高温向低温转变，一般是熵增的过程；而信息论中，为了最大可能接收到正确的（发出==收到）的信息，我们处理（优化）系统，是一种熵减的过程，信熵越小，系统有用信息量越大。</p><p>信息熵：<strong>信息的基本作用就是消除人们对事物的不确定性</strong> 。多数粒子组合之后，在它似像非像的形态上押上有价值的数码，具体地说，这就是一个在博弈对局中现象信息的混乱。</p><h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p>-(p1<em>log(2,p1) + p2 </em> log(2,p2) +　．．．　+p32 *log(2,p32))，其中，p1，p2 ，　．．．，p32 分别是这 32 个球队夺冠的概率。香农把它称为“信息熵” (Entropy)，一般用符号 H 表示，单位是比特。</p><p><img src="/image2/hotShang_1.3.jpeg" alt="熵增"></p><p>有兴趣的读者可以推算一下当 32 个球队夺冠概率相同时，对应的信息熵等于五比特。有数学基础的读者还可以证明上面公式的值不可能大于五。因为得冠军的频率相同代表整个系统信息量最小。</p><p>熵是随机变量不确定性的度量，不确定性越大，熵值就越大；若随机变量退化成定值，熵为0。均匀分布(信熵最大)是“最不确定”的分布。</p><p>熵最早来原于物理学. 德国物理学家鲁道夫·克劳修斯首次提出熵的概念，用来表示任何一种能量在空间中分布的均匀程度，能量分布得越均匀，熵就越大。</p><blockquote><p>总结：香农，描述一个信息系统的时候就借用了熵的概念，这里熵表示的是这个信息系统的平均信息量(平均不确定程度),信熵越小，系统信息不确定程度越低，反之，系统信息输出越混乱，有用信息越不容易被确认。</p></blockquote><h3 id="1-3-联合熵"><a href="#1-3-联合熵" class="headerlink" title="1.3 联合熵"></a>1.3 联合熵</h3><p>联合熵是一集变量之间不确定性的衡量手段。两个变量和的联合信息熵定义为：</p><p><img src="/image2/lianheShang1.3.1.png" alt="联合熵"></p><ul><li>一集变量的联合熵大于或等于这集变量中任一个的独立熵。</li></ul><p><img src="/image2/lianheShang1.3.2.png" alt="联合熵"> </p><ul><li>少于独立熵的和</li></ul><p><img src="/image2/lianheShang1.3.3.png" alt="联合熵"> </p><p>这表明，两个变量关联之后不确定性会增大，但是又由于相互有制约关系，不确定小于单独两个变量的不确定度之和。</p><h3 id="1-4-条件熵"><a href="#1-4-条件熵" class="headerlink" title="1.4 条件熵"></a>1.4 条件熵</h3><ul><li>条件熵H(X|Y) = H(X,Y) - H(Y)</li></ul><blockquote><p>X在条件Y下的条件熵</p></blockquote><p><img src="/image2/tiaojianShang1.4.1.png" alt="条件熵"> </p><p>条件熵 H(Y|X) 表示在已知随机变量 X 的条件下随机变量 Y 的不确定性。条件熵 H(Y|X) 定义为 X 给定条件下 Y 的条件概率分布的熵对  X 的数学期望：</p><p>证明如下：</p><p><img src="/image2/HMM_tiaojianS_1.4.1.png" alt="条件熵"></p><p>条件熵 H(Y|X) 相当于联合熵 H(X,Y) 减去单独的熵 H(X)，即</p><p><img src="/image2/HMM_tiaojianS_1.4.2.png" alt="条件熵"></p><p>举个例子，比如环境温度是低还是高，和我穿短袖还是外套这两个事件可以组成联合概率分布 H(X,Y)，因为两个事件加起来的信息量肯定是大于单一事件的信息量的。假设 H(X) 对应着今天环境温度的信息量，由于今天环境温度和今天我穿什么衣服这两个事件并不是独立分布的，所以在已知今天环境温度的情况下，我穿什么衣服的信息量或者说不确定性是被减少了(条件熵减少，联合熵是不变)。当已知 H(X) 这个信息量的时候，H(X,Y) 剩下的信息量就是条件熵：</p><p>H(Y|X)=H(X,Y)−H(X)</p><h3 id="1-5-相对熵与互信息"><a href="#1-5-相对熵与互信息" class="headerlink" title="1.5 相对熵与互信息"></a>1.5 相对熵与互信息</h3><ul><li><p>相对熵 (Relative entropy)，也称KL散度 (Kullback–Leibler divergence)</p><p>设p(x),q(x)是X中取值的两个概率分布，则p对q的相对熵是：</p></li></ul><p><img src="/image2/HMM_xiangduiS_1.5.1.gif" alt="相对熵"></p><p>性质： </p><ul><li>1、如果 p(x) 和 q(x) 两个分布相同，那么相对熵等于0</li><li>2、<img src="/image2/HMM_xiangduiS_1.5.2.gif" alt="相对熵"> ,相对熵具有不对称性。大家可以举个简单例子算一下。</li><li>3、DKL(p||q)≥0 证明如下（利用Jensen不等式<a href="https://en.wikipedia.org/wiki/Jensen%27s_inequality）：" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Jensen%27s_inequality）：</a></li></ul><p><img src="/image2/HMM_xiangduiS_1.5.3.png" alt="相对熵"></p><p>因为：</p><p><img src="/image2/HMM_xiangduiS_1.5.4.gif" alt="相对熵"></p><p>所以：</p><p><img src="/image2/HMM_xiangduiS_1.5.5.gif" alt="相对熵"></p><p>总结：相对熵可以用来衡量两个概率分布之间的差异，上面公式的意义就是求 p 与 q 之间的对数差在 p 上的期望值。</p><blockquote><p>相对熵，两者相同，那么相对熵等于0，两者差距越大，则相对熵值越大。</p></blockquote><h4 id="互信息"><a href="#互信息" class="headerlink" title="互信息"></a>互信息</h4><p>两个随机变量X，Y的联合分布与独立分布乘积的相对熵，即：</p><p><img src="/image2/huxinxi_1.png" alt="互信息"></p><p><img src="/image2/huxinxi_2.png" alt="互信息"></p><h3 id="1-6-交叉熵-Cross-entropy"><a href="#1-6-交叉熵-Cross-entropy" class="headerlink" title="1.6 交叉熵 (Cross entropy)"></a>1.6 交叉熵 (Cross entropy)</h3><p>熵的公式：<br>$$<br>H(p)=-\displaystyle\sum_{x}p(x)logp(x)<br>$$</p><p>相对熵的公式：</p><p>$$<br>H(p,q)=\displaystyle\sum _{x}p(x)log\frac{1}{q(x)}=-\sum _{x}p(x)logq(x)<br>$$</p><p>所以有：</p><p>$$<br>D_{KL}(p||q)=H(p,q)-H(p)<br>$$</p><blockquote><p>当用非真实分布 q(x) 得到的平均码长比真实分布 p(x) 得到的平均码长多出的比特数就是相对熵）</p></blockquote><blockquote><p>并且当 H(p) 为常量时（注：在机器学习中，训练数据分布是固定的），最小化相对熵 DKL(p||q) 等价于最小化交叉熵 H(p,q) 也等价于最大化似然估计（具体参考Deep Learning 5.5）。</p></blockquote><blockquote><p>在机器学习中，我们希望在训练数据上模型学到的分布 P(model) 和真实数据的分布  P(real) 越接近越好，所以我们可以使其相对熵最小。</p></blockquote><ul><li>信息熵是衡量随机变量分布的混乱程度，是随机分布各事件发生的信息量的期望值，随机变量的取值个数越多，状态数也就越多，信息熵就越大，混乱程度就越大。当随机分布为均匀分布时，熵最大；信息熵推广到多维领域，则可得到联合信息熵；条件熵表示的是在 X 给定条件下，Y 的条件概率分布的熵对 X<br>的期望。</li><li>相对熵可以用来衡量两个概率分布之间的差异。</li><li>交叉熵可以来衡量在给定的真实分布下，使用非真实分布所指定的策略消除系统的不确定性所需要付出的努力的大小。</li></ul><ul><li>几种熵的关系：</li></ul><p><img src="/image2/shangzongJ.png" alt="熵关系"></p><h2 id="二、最大熵模型"><a href="#二、最大熵模型" class="headerlink" title="二、最大熵模型"></a>二、<a href="https://www.cnblogs.com/hgl0417/p/6693656.html" target="_blank" rel="noopener">最大熵模型</a></h2><ul><li><p>最大熵模型在形式上是最漂亮的统计模型，而在实现上是最复杂的模型之一。最大熵模型，可以说是集简与繁于一体，形式简单，实现复杂。值得一提的是，在Google的很多产品中，比如机器翻译，都直接或间接地用到了最大熵模型。 </p></li><li><p>达拉皮垂兄弟等科学家在那里，用于最大熵模型和其他一些先进的数学工具对股票预测，获得了巨大的成功。(值得一提的是，信息处理的很多数学手段，包括隐含马尔可夫模型、子波变换、贝叶斯网络等等，在华尔街多有直接的应用。由此可见，数学模型的作用)。</p></li></ul><p>我们平常说的最大熵模型，只是运用最大熵思想的多分类模型，最大熵的思想却是一种通用的思维方法。所以，理解最大熵模型只需要搞清楚两件事就可以：</p><ul><li>最大熵思想是什么</li><li>最大熵模型是如何运用最大熵思想的</li></ul><h3 id="2-1-最大熵思想"><a href="#2-1-最大熵思想" class="headerlink" title="2.1 最大熵思想"></a>2.1 最大熵思想</h3><p>我们知道，分类模型有判别模型和生成模型两种，判别模型是要学习一个条件概率分布 P(y|x)。<br><strong>举例说明</strong> ，设：x是病人身体指标，体温、血压、血糖，y是各种可能的疾病，可简化为小病、中病、大病三种。</p><p>现在，我们有一个样本x1={体温：30，血压：160，血糖：60}，那么P(y|x1)就是一个概率分布，该分布的值就是上面简化的三种，小病、中病、大病。可能的概率分布如下所示：</p><table><thead><tr><th style="text-align:center">之前参考样本\病况</th><th style="text-align:center">小病</th><th style="text-align:center">中病</th><th style="text-align:center">大病</th></tr></thead><tbody><tr><td style="text-align:center">假设之前有和X1一样的情况有1/2的患者为小病，则此时的最大熵参考样本为</td><td style="text-align:center">1/2</td><td style="text-align:center">1/4</td><td style="text-align:center">1/4</td></tr><tr><td style="text-align:center">先前12个人和X1一样，结果有3个小病，4个中病的患者，则5个大病</td><td style="text-align:center">1/4</td><td style="text-align:center">1/3</td><td style="text-align:center">5/12</td></tr><tr><td style="text-align:center">无先前参考样本，假设取最大熵的概率</td><td style="text-align:center">1/3</td><td style="text-align:center">1/3</td><td style="text-align:center">1/3</td></tr></tbody></table><blockquote><p>当然，这样的分布有无数种，上面只是举例说明而已。那么，问题来了，在这无数种概率分布中，哪一个才是好的呢？</p></blockquote><ul><li><p>1、也就是说我们没有过往的经验可以参考，那么，就直接选一个熵最大的分布就是，也就是上面表格中的第三个分布，因为均匀分布总是同类分布中熵最大的分布。</p></li><li><p>2、如果查看以往病例后，我们得到一个经验，指标x1={体温：30，血压：160，血糖：60}有1/2的概率是小病，于是我们有了一定的经验知识，此时，最好的分布就是符合这个经验知识的前提下，熵最大的分布，显然，第一个分布就是最好的分布。</p></li><li><p>以上，我们就是运用了 <strong>最大熵的思想</strong> 。总结来说，最大熵的思想是，当你要猜一个概率分布时，如果你对这个分布一无所知，那就猜熵最大的均匀分布，如果你对这个分布知道一些情况，那么，就猜满足这些情况的熵最大的分布。</p></li></ul><h3 id="2-2-运用最大熵思想来做多分类问题"><a href="#2-2-运用最大熵思想来做多分类问题" class="headerlink" title="2.2 运用最大熵思想来做多分类问题"></a>2.2 运用最大熵思想来做多分类问题</h3><ul><li>最大熵原理认为，学习概率模型时，在所有可能的概率模型（分布）中，上最大的模型是最好 的模型。 </li></ul><p>假设离散随机变量X的概率分布是P(X)，则其熵是：</p><p><img src="/image2/hotShang_1.2.jpeg" alt="熵增"></p><p>熵取值范围为（当且仅当X是均匀分布时右边的等号成立）：</p><p><img src="/image2/shangQZFW.gif" alt="熵取值范围"></p><ul><li><p>直观的，最大熵原理认为，要选择的概率模型首先必须要满足已有的事实，即约束条件后，对那些不确定的部分进行等可能概率分配。最大熵原理通过熵的最大化来表示为约束部分等可能性。</p></li><li><p>最大熵定义</p></li></ul><h3 id="2-3-最大熵的例题解说"><a href="#2-3-最大熵的例题解说" class="headerlink" title="2.3 最大熵的例题解说"></a>2.3 最大熵的例题解说</h3><p>题：假设随机变量X有5个取值{A,B,C,D,E}, 要估计取各个值的概率P(A),P(B),P(C),P(D),P(E). 假设约束条件如下：</p><p><img src="/image2/shangQZ_1.gif" alt="熵取值范围"></p><p><img src="/image2/shangQZ_2.gif" alt="熵取值范围"></p><blockquote><p>满足上述两个约束条件的可能取值任然很多，于是在求最大熵的过程中，为了得到最大熵，认为为约束的概率分布为等概率分布（等概率分布能确定为最大熵）</p></blockquote><p>解：有约束条件和概率分布知识可知,</p><p>$$<br>min -H(P) = \sum_{i=1}^{5}P(y_{i})logP(y_{i})<br>$$</p><p><img src="/image2/shangQZ_3.gif" alt="熵取值范围"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.t. P(y_&#123;1&#125;)+P(y_&#123;2&#125;)=\widetilde&#123;P(y_&#123;1&#125;)&#125;+\widetilde&#123;P(y_&#123;2&#125;)&#125;=\frac&#123;3&#125;&#123;10&#125;</span><br></pre></td></tr></table></figure><p><img src="/image2/shangQZ_4.gif" alt="熵取值范围"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\sum_&#123;i=1&#125;^&#123;5&#125;P(y_&#123;i&#125;) = \sum_&#123;i=1&#125;^&#123;5&#125;\widetilde&#123;P(y_&#123;i&#125;)&#125;=1</span><br></pre></td></tr></table></figure><p><img src="/image2/shangQZ_5.gif" alt="熵取值范围"></p><blockquote><p>其中带波浪的是实际经验分布概率函数。</p></blockquote><ul><li>引进拉格朗日乘子<img src="/image2/shangQZ_6.gif" alt="熵取值范围">、<img src="/image2/shangQZ_7.gif" alt="熵取值范围"> 。由上面的约束条件得到的三个方程式结合拉格朗日乘子得到如下拉格朗日函数L(P,w)的表达式。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L(P,w)=-H(P)+\omega _&#123;0&#125;(\sum_&#123;y&#125;^&#123; &#125;)P(y|x))+\sum_&#123;i=1&#125;^&#123;n&#125;\omega_&#123;1&#125;(E_&#123;\widetilde&#123;P&#125;&#125;(f_&#123;i&#125;)-E_&#123;P&#125;(f_&#123;i&#125;))=\sum_&#123;x,y&#125;\widetilde&#123;P(x)&#125;P(y|x)logP(y|x)+\omega_&#123;0&#125;(1-\sum_&#123;y&#125;^&#123; &#125;P(y|x))+\sum_&#123;i=1&#125;^&#123;n&#125;\omega_1(\sum_&#123;x,y&#125;\widetilde&#123;P(x,y)&#125;-\sum_&#123;x,y&#125;^&#123; &#125;\widetilde&#123;P(x)&#125;P(y|x)f_&#123;i&#125;(x,y))</span><br></pre></td></tr></table></figure><p><img src="/image2/shangQZ_8.gif" alt="熵取值范围"></p><p>带入题干信息可得如下的拉格朗日函数对应本题的表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L(P,w)=-H(P)+\omega_&#123;0&#125;(1-\sum_&#123;y&#125;^&#123; &#125;P(y|x))+\sum_&#123;i=1&#125;^&#123;n&#125;\omega_&#123;i&#125;(E_&#123;\widetilde&#123;P&#125;&#125;(f_&#123;i&#125;)-E_&#123;P&#125;(f_&#123;i&#125;))=\sum_&#123;i=1&#125;^&#123;5&#125;P(y_&#123;i&#125;)logP(y_&#123;i&#125;)+\omega_&#123;1&#125;(P(y_&#123;1&#125;)+P(y_&#123;2&#125;)-\frac&#123;3&#125;&#123;10&#125;)+\omega_&#123;0&#125;(\sum_&#123;i=1&#125;^&#123;5&#125;P(y_&#123;i&#125;)-1)</span><br></pre></td></tr></table></figure><p>这里只有3个限制条件，所以带入三个变量w得：</p><p><img src="/image2/shangQZ_9.gif" alt="熵取值范围"></p><ul><li>原始问题和对偶问题</li></ul><p>根据拉格朗日函数（Ｌ)的对偶性，可以通过求解Ｌ(w)函数的对偶最优化问题得到我们原是函数（Ｌ(p))的最优解。即：</p><p><img src="/image2/shangQZFW_1.gif" alt="最优问题"></p><p>即，对于构造的Ｌ函数，求Ｐ的最小值问题对应ｗ参数的最大值最优解问题，Ｐ是要求的原始问题。Ｐ是原始问题的对偶问题的求解函数变量。</p><p>接下来开始求解了原始问题和对偶问题的最优解问题，步骤如下：</p><ul><li>第一步先将原始问题（Ｐ参数的Ｌ函数）的最优解换化出来，即</li></ul><p><img src="/image2/shangQZFW_２.gif" alt="y1偏导数"></p><p><img src="/image2/shangQZFW_３.gif" alt="y2偏导数"></p><p><img src="/image2/shangQZFW_４.gif" alt="y3偏导数"></p><p><img src="/image2/shangQZFW_５.gif" alt="y4偏导数"></p><p><img src="/image2/shangQZFW_６.gif" alt="y5偏导数"></p><ul><li>令各偏导数等于0，解得：</li></ul><p><img src="/image2/shangQZFW_7.gif" alt="偏导数得"></p><p><img src="/image2/shangQZFW_8.gif" alt="偏导数得"></p><p>于是，</p><p><img src="/image2/shangQZFW_9.gif" alt="偏导数得"></p><ul><li>第二步，将原始问题对应的对偶问题（ｗ参数，对应Ｌ函数的最优解）的最优解解出来，即</li></ul><p>$$<br>L(P_{w},w)<br>$$</p><p>关于$$w$$的极大化问题。</p><p>$$<br>\max_{\omega}L(P_{w},w)=-2e^{-w_{1}-w_{0}-1}-3e^{-w_{1}-1}-\frac{3}{10}w_{1}-w_{0}<br>$$</p><p>分别求$$L(P_{w},w)$$关于$$w_{0},w_{1}$$的偏导数并令其为0，得到：</p><p>$$<br>e^{-w_{1}-w_{0}-1}=\frac{3}{20}<br>,e^{-w_{0}-1}=\frac{7}{30}<br>$$</p><p>于是得到所要求的概率分布为：</p><p>$$<br>P(y_{1})=P(y_{2})=\frac{3}{20}<br>,P(y_{3})=P(y_{4})=P(y_{5})=\frac{7}{30}<br>$$</p><blockquote><p>总结：最大熵模型，形式简单，但是训练的代价太大，比如最原始的最大熵训练模型GIS（通用迭代算法）和IIS（改进迭代算法），每次迭代时间都很长，而且每步需要迭代很多次，实现复杂了。</p></blockquote><hr><p><strong>追加</strong> ：此处记录下拉格朗日函数的相关性质：</p><ul><li>拉格朗日中值定理：</li></ul><p>如果函数f(x)满足：<br>（1）在闭区间[a, b]上连续；<br>（2）在开区间[a, b]内可导；<br>那么在开区间(a, b)内至少有一点 <img src="/image2/lagelangri_1.jpg" alt="拉格朗日插值"> 使等式 <img src="/image2/lagelangri_2.jpg" alt="拉格朗日插值"> 成立。</p><ul><li>拉格朗日差值法：</li></ul><p>1、两点确定一条直线，这条直线就是线性插值</p><p>2、 <img src="/image2/lagelangrichazhi_1.gif" alt="拉格朗日插值"> ，这个$$P_{1}(x)$$函数就是线性插值函数</p><p>为了和后面公式进行对比，上面公式可以转化为下面表达式，</p><p><img src="/image2/lagelangrichazhi_2.gif" alt="拉格朗日插值"></p><p>这两个都是叫做线性插值的基函数 .</p><p>得到的插值效果如下：</p><p><img src="/image2/lagelangrichazhi_2_1.gif" alt="拉格朗日插值"></p><blockquote><p>线性插值仅仅利用两个节点信息，精确度很低，故接下来讲二次差值(考察曲线问题)</p></blockquote><p>3、拉格朗日二次插值</p><p>如果按照线性插值的形式，以每3个相邻点做插值，就得到了二次插值(3个点：xi,xi+1,xi+2)：</p><p><img src="/image2/lagelangrichazhi_3.gif" alt="拉格朗日插值"></p><p>得到的曲线效果是：</p><p><img src="/image2/lagelangrichazhi_3_1.gif" alt="拉格朗日插值"></p><p>二次插值在每段二次曲线内是光滑的，但在每条曲线的连接处其光滑性可能甚至比线性插值还差。二次插值只适合3个节点的情形，当节点数超过3个时，就需要分段插值了。</p><p>4、拉格朗日多项式插值</p><p><img src="/image2/lagelangrichazhi_4.gif" alt="拉格朗日插值"></p><blockquote><p>  一个n次的拉格朗日插值函数可以绘制经过(n+1)个节点的曲线，但运算量非常大。而且在次数比较高时，容易产生剧烈的震荡（龙格现象）。所以要选择位置特殊的节点（比如切比雪夫多项式的零点）进行插值，或使用多个次数较低的拉格朗日函数分段插值。（关于拉格朗日多项式和龙格现象，详见维基百科链接）</p></blockquote><p>使用4次拉格朗日多项式分段插值：</p><p><img src="/image2/lagelangrichazhi_4_1.gif" alt="拉格朗日插值"></p><p>如果直接使用20次的拉格朗日插值，得到的图像如下：</p><p><img src="/image2/lagelangrichazhi_4_1_1.gif" alt="拉格朗日插值"></p><p>等，更多的插值，[请参考这里] <a href="https://blog.csdn.net/eric_e/article/details/79499617" target="_blank" rel="noopener">数值分析（拟合、插值和逼近）之数据插值方法（线性插值、二次插值、Cubic插值、埃米尔特、拉格朗日多项式插值、牛顿插值、样条插值</a></p><hr><hr><p><a href="https://www.cnblogs.com/hgl0417/p/6693656.html" target="_blank" rel="noopener">参考地址1</a><br><a href="https://www.cnblogs.com/skyme/p/4651331.html" target="_blank" rel="noopener">参考地址2</a><br><a href="https://www.cnblogs.com/Determined22/p/6750327.html" target="_blank" rel="noopener">参考地址3</a></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.1.3 隐马尔科夫HMM</title>
      <link href="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-2-1-3-%E9%9A%90%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%ABHMM/"/>
      <url>/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-2-1-3-%E9%9A%90%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%ABHMM/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本篇文章笔记总结来自网络和书本，引用部分都有来源，内容主要介绍隐马尔科夫HMM相关实际应用搞得入门例子，很简单，但是能说明隐马尔科夫HMM的原理相关。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="HMM（隐马尔可夫模型）"><a href="#HMM（隐马尔可夫模型）" class="headerlink" title="HMM（隐马尔可夫模型）"></a>HMM（隐马尔可夫模型）</h1><p>隐马尔可夫模型是一种统计模型，用来描述一个含有隐含未知参数的马尔可夫过程。其难点是从可观察的参数中确定该过程的隐含参数。然后利用这些参数来作进一步的分析，例如模式识别。</p><p>是在被建模的系统被认为是一个马尔可夫过程与未观测到的（隐藏的）的状态的统计马尔可夫模型。</p><p>本文简述的是离散情况下的隐马尔可夫模型.</p><h2 id="一、贝叶斯公式"><a href="#一、贝叶斯公式" class="headerlink" title="一、贝叶斯公式"></a>一、贝叶斯公式</h2><p>定义：假设以硬币的例子，从5角和1元的一堆硬币中，随意取出一枚硬币，然后然我们猜这枚硬币是5角还是1元。假设允许我们称这枚硬币的重量x（单位：g），(但是不允许我们直接看硬币，一般1元是比5角重的)。现在应考察在一直这枚硬币的重量x的情况下硬币属于各类（5角还是一元)的概率，分别记$$P(\omega_{1}|x)$$,(知重量为x时，是5角的概率),$$P(\omega_{2}|x)$$, (知重量为x时，是一元的概率)，这种概率成为后验概率（我们需要求的）。这时的决策为：如果$$P(\omega_{1}|x)&gt;P(\omega_{2}|x)$$,则$$x \epsilon \omega_{1} $$; 反之，则$$x \epsilon \omega_{2} $$</p><ul><li>最终我们要的就是这个决策。</li></ul><p>概率论中的贝叶斯公式：</p><p>$$<br>P(\omega_{i}|x)=\frac{p(x,\omega_{i})}{p(\omega_{i})}=\frac{p|\omega_{i}P(\omega_{i})}{p(x)} ,i=1,2<br>$$</p><table><thead><tr><th style="text-align:center">分布</th><th style="text-align:center">表示</th><th style="text-align:left">$$x \epsilon \left { \omega_{1},\omega_{2} \right }$$</th></tr></thead><tbody><tr><td style="text-align:center">类条件概率：</td><td style="text-align:center">$$p(x\mid \omega_{i})$$</td><td style="text-align:left">表示得到硬币结果是$$\omega_{i}$$条件下，得到x的概率密度</td></tr><tr><td style="text-align:center">后验概率：</td><td style="text-align:center">$$P(\omega_{i}\mid x)$$</td><td style="text-align:left">在重量为x，的条件下，得到是哪种硬币（5/1）的概率</td></tr><tr><td style="text-align:center">先验概率：</td><td style="text-align:center">$$P(\omega_{i})$$</td><td style="text-align:left">根据之前的经验，得到5角和1元各自取得的概率</td></tr><tr><td style="text-align:center">硬币重量概率密度函数:</td><td style="text-align:center">$$p(x)$$</td><td style="text-align:left">硬币重量的概率密度函数</td></tr><tr><td style="text-align:center">联合概率密度：</td><td style="text-align:center">$$p(x,\omega_{i})$$</td><td style="text-align:left">在重量不同条件下，每种情况对应的取得不同硬币结果的联合概率</td></tr></tbody></table><p>$$<br>P(Q_{i}|O)=\frac{P(O,Q_{i})}{P(O)}=\frac{P(O|Q_{i})P(Q)}{P(O)}<br>$$</p><p>$$<br>P(Q_{i}|O)=\frac{P(O,Q_{i})}{P(O)}=\frac{P(O|Q_{i})P(Q)}{P(O)}<br>$$</p><p>$$P(Q_{i}|O)$$ ,后验概率，$$P(O,Q_{i})$$ ,表示O与Q的联合概率密度；P(O)表示两类所有的概率密度； P(Q_{i})是先验概率；$$P(O|Q_{i})$$是第i类状态随机序列的类条件概率密度</p><blockquote><p>贝叶斯决策：在类条件概率密度和鲜艳概率已知（或可估计）的情况下，通过贝叶斯公式比较样本属于两类的后验概率，将类别决策为后验概率大的一类，这样做的目的是为了使总体错误率最小。</p></blockquote><p>一条隐藏的马尔可夫链生成的 <strong>状态随机序列</strong> (State sequence, 图中的白色节点) $$Q=(q_{1},q_{2},…..,q_{T})$$是<strong>不可观测的</strong>，并记所有可能状态的集合为$$S={S_{1},S_{2},…..,S_{N}}$$;由它们产生一个<strong>可观测的观测随机序列</strong>（observation sequence，图示的深色节点）$$O=(o_{1},o_{2},……,o_{T})$$, 并记所有可能观测的集合为$$V={v_{1},v_{2},……,v_{M}}$$。</p><p>序列的值可以看作是随时刻产生的，每个时刻对应着序列的一个值。所以HMM是个双重随机过程（doubly embedded stochastic process），一个是状态转移，另一个是由状态释放出观测值。在序列标注（Sequence labelling）任务中，模型就是需要对状态序列进行标注。</p><p><img src="/image2/HHMarkov_3.1.png" alt="HHM 示意图"></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.1.3 隐马尔科夫HMM</title>
      <link href="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-2-2-%E7%9F%A9%E9%98%B5%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-2-2-%E7%9F%A9%E9%98%B5%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本篇文章笔记总结来自网络和书本，引用部分都有来源，内容主要介绍矩阵相关基础相关实际应用搞得入门例子，很简单，但是能说明矩阵相关基础的原理相关。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="矩阵相关基础知识"><a href="#矩阵相关基础知识" class="headerlink" title="矩阵相关基础知识"></a>矩阵相关基础知识</h1>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.3 线性回归</title>
      <link href="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-2-3-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
      <url>/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-2-3-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本篇文章笔记总结来自网络和书本，引用部分都有来源，内容主要介绍线性回归相关基础相关实际应用搞得入门例子，很简单，但是能说明线性回归相关基础的原理相关。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="LinearRegression算法"><a href="#LinearRegression算法" class="headerlink" title="LinearRegression算法"></a>LinearRegression算法</h1><blockquote><p><a href="https://baijiahao.baidu.com/s?id=1613474944612061421&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">学习参考来源</a></p></blockquote><h1 id="一、最小二乘法的拟合原理"><a href="#一、最小二乘法的拟合原理" class="headerlink" title="一、最小二乘法的拟合原理"></a>一、最小二乘法的拟合原理</h1><p><img src="/image2/zuiXECfa_define.jpeg" alt="最小二乘法"></p><p>最小二乘法定义如上图所示，但是初看可能会有点懵，上面的表示是啥意思，好接下来总结下我的理解</p><p>最小二乘法（又称最小平方法）是一种数学优化技术，除了能拟合直线还能拟合曲线问题。</p><blockquote><p>书中截取部分如果可以这样理解$$\alpha_{i}$$，如果是二次项的话$$y=\alpha_{1} x^{2}+\alpha_{2} x + \alpha_{3} $$，知道了吧，就是一个二项式子中的待解参数。</p></blockquote><p>本文为了推导和笔记的简单化，直接以拟合直线 $$f(x;a,b): y=ax+b$$</p><h2 id="1-1-代数推导："><a href="#1-1-代数推导：" class="headerlink" title="1.1 代数推导："></a>1.1 代数推导：</h2><ul><li>[1]. 假设拟合直线 $$f(x;a,b): y=ax+b$$</li><li>[2]. 已经由n个样本$$(x_{n}, y_{n})$$</li><li>[3]. 误差$$e_{i}=y_{i}-(ax_{i}+b)$$</li><li>[4]. 当$$S = \sum_{i=1}^{n} e_{i}^{2}$$为最小值时，即得到的a,b参数就是最小二乘法得到的解.</li></ul><p>如何求解这些参数（a，b）</p><p>$$\frac{\partial S}{\partial b}=-2(\sum_{i=1}^{n}y_{i}-nb-a\sum_{i=1}^{n}x_{i})$$</p><p>$$\frac{\partial S}{\partial a}=-2(\sum_{i=1}^{n}x_{i}y_{i}-b\sum_{i=1}{n}x_{i}-a\sum_{i=1}^{n}x_{i}^{2})$$</p><p>分别令上式中对a,b求偏导数的有点等于0,以此求取对a,b的最值.有：$$n\bar x=\sum_{i=1}^{n}x_i,n\bar y=\sum_{i=1}^{n}y_i$$</p><p>得到：</p><p>$$a=\frac {\sum_{i=1}^{n}({x_i-\bar x})(y_i-\bar y)}  {\sum_{i=1}^{n}({x_i-\bar x})^2}$$</p><p>$$b=\bar y-a\bar x$$</p><p>$$a=\frac {n\sum_{}^{}{x_iy_i}-\sum_{}^{}{x_i}\sum_{}^{}{y_i}}  {n\sum_{}^{}{x_i}^2-(\sum_{}^{}{x_i})^2}$$</p><p>$$b=\frac {\sum_{}^{}{x_i}^2\sum_{}^{}{y_i}-\sum_{}^{}{x_i}\sum_{}^{}{x_iy_i}}  {n\sum_{}^{}{x_i}^2-(\sum_{}^{}{x_i})^2}$$</p><h3 id="1-1-1-代数推导的代码实现"><a href="#1-1-1-代数推导的代码实现" class="headerlink" title="1.1.1 代数推导的代码实现"></a>1.1.1 代数推导的代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcAB</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    n = len(x)</span><br><span class="line">    sumX,sumY,sumXY,sumXX =<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n):</span><br><span class="line">        sumX  += x[i]</span><br><span class="line">        sumY  += y[i]</span><br><span class="line">        sumXX += x[i]*x[i]</span><br><span class="line">        sumXY += x[i]*y[i]</span><br><span class="line">    a = (n*sumXY -sumX*sumY)/(n*sumXX -sumX*sumX)</span><br><span class="line">    b = (sumXX*sumY - sumX*sumXY)/(n*sumXX-sumX*sumX)</span><br><span class="line">    <span class="keyword">return</span> a,b,</span><br><span class="line"></span><br><span class="line">xi = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">yi = [<span class="number">10</span>,<span class="number">11.5</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14.5</span>,<span class="number">15.5</span>,<span class="number">16.8</span>,<span class="number">17.3</span>,<span class="number">18</span>,<span class="number">18.7</span>]</span><br><span class="line">a,b=calcAB(xi,yi)</span><br><span class="line">print(<span class="string">"y = %10.5fx + %10.5f"</span> %(a,b))</span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">y = a * x + b</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.scatter(xi,yi)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="1-2-矩阵推导"><a href="#1-2-矩阵推导" class="headerlink" title="1.2 矩阵推导"></a>1.2 矩阵推导</h2><p>对于$$y=ax+b$$,转为向量的形式为<br>$$<br>W=\begin{bmatrix}<br>w_0\<br>w_1<br>\end{bmatrix},X=\begin{bmatrix}<br>1\<br>x_1<br>\end{bmatrix}<br>$$</p><p>于是：<br>$$y=w_1x_1+w_0=W^TX$$</p><p>损失函数为:</p><p>$$<br>L=\frac{1}{n}\sum_{i=1}^{n}(y_n-(W^TX)^2)=\frac{1}{n}(y-XW)^T(y-XW)<br>$$</p><p>最后可化为</p><p>$$\frac{1}{n}X^TW^TXW-\frac{2}{n}X^TW^Ty+\frac{1}{n}y^Ty$$</p><p>令偏导为0</p><p>$$\frac{\partial L}{\partial W}=\frac{2}{n}X^TXW-\frac{2}{n}X^Ty=0$$</p><p>另外：</p><p>$$(X^TX)^{-1}X^TX=E,EW=W$$,则</p><p>$$(X^TX)^{-1}X^TXW=(X^TX)^{-1}X^Ty,W=(X^TX)^{-1}X^Ty$$</p><h3 id="1-2-1-代码实现："><a href="#1-2-1-代码实现：" class="headerlink" title="1.2.1 代码实现："></a>1.2.1 代码实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">y = [<span class="number">10</span>,<span class="number">11.5</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14.5</span>,<span class="number">15.5</span>,<span class="number">16.8</span>,<span class="number">17.3</span>,<span class="number">18</span>,<span class="number">18.7</span>]</span><br><span class="line"></span><br><span class="line">A = np.vstack([x,np.ones(len(x))]).T</span><br><span class="line"></span><br><span class="line">a,b = np.linalg.lstsq(A,y)[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">"y = %10.5fx + %10.5f"</span> %(a,b))</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y,<span class="string">'o'</span>,label=<span class="string">'data'</span>,markersize=<span class="number">10</span>)</span><br><span class="line">plt.plot(x,a*x+b,<span class="string">'r'</span>,label=<span class="string">'line'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>拟合的效果（蓝线）</p><p><img src="/image2/ZECFa.png" alt="拟合图"></p><h2 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3 小结"></a>1.3 小结</h2><p><img src="/image2/zuiXECfa_1.jpeg" alt="最小二乘法"></p><p><img src="/image2/zuiXECfa_1.jpeg" alt="切比雪夫算法"></p><h1 id="二、线性回归"><a href="#二、线性回归" class="headerlink" title="二、线性回归"></a>二、线性回归</h1><p>线性回归的目的是找到一个与这些数据最为温和的线性函数，用来预测或者分类，主要解决线性问题。<br>一般来说，线性回归问题都可以通过最小二乘法来求出方程。线性回归属于监督学习,因此方法和监督学习应该一样，先给一个训练集，根据这个训练集学习出一个线性函数，然后测试这个函数训练的好不好（拟合是否恰当）。Cost Function 越小的函数，说明训练数据拟合程度越好。</p><ul><li>线性回归，通过数据集的线性组合来预测函数：</li></ul><p>$$f(x)=\omega_{1}x_{1}+\omega_{2}x_{2}+\omega_{3}x_{3}+…+\omega_{d}x_{d}+b$$</p><p>一般向量形式写为：</p><p>$$f(x)=\omega^{T}x+b$$</p><p>其中的$$\omega=(\omega_{1};\omega_{2};\omega_{2};…\omega_{d})$$</p><p>$$x_{1},x_{2},…x_{k}$$是一组独立的预测变量</p><p>$$\omega_{1},\omega_{2},…\omega_{k}$$为模型从训练数据中学习得到的参数，或称赋予每个变量的权值。</p><p>b是一个学习到的参数，这个现行函数中的常量也称模型的偏置（Bias）</p><ul><li>根据输入属性可分为一元，二元……多元线性回归。</li></ul><p>多元数据集的定义如下：</p><p>$$D=\left [ x_{i,j}, y_{i}\right ]$$，其中i,表示数据集第i位序列的值，而j则表示在第i位x的属性是j种属性，即数据集中，x(i,j)，i维行，j维纵坐标的矩阵。</p><p>即数据集j元的属性矩阵表示为：<br>$$<br>\begin{bmatrix}<br>x_{1,1} &amp; x_{1,2} &amp; … &amp; x_{1,j-1} &amp; x_{1,j}\<br>x_{2,1} &amp; x_{2,2} &amp; … &amp; x_{2,j-1} &amp; x_{2,j}\<br>… &amp; … &amp; … &amp; … &amp; …\<br>x_{i,1} &amp; x_{i,2} &amp; … &amp; x_{i,j-1} &amp; x_{i,j}<br>\end{bmatrix}<br>$$</p><p>比如3元的表示一个西瓜好坏，【hue, root,  echo】，加入预测函数的参数已经求得$$\omega=\left [ 0.2, 0.5, 0.3 \right ],b=1$$，则好瓜（good)函数$$f_{good}(x)=0.2 \cdot x_{hue}+0.5 \cdot x_{root}+0.3 \cdot x_{echo}+1$$</p><h2 id="2-1-一元线性回归"><a href="#2-1-一元线性回归" class="headerlink" title="2.1 一元线性回归"></a>2.1 一元线性回归</h2><ul><li>输入属性只有一个的情况，称一元线性回归</li></ul><blockquote><p>属性：</p></blockquote><p>这里考虑一元的情况则数据集为： $$D=\left [ x_{i}, y_{i}\right ]_{i=1}^{m} $$,即上面矩阵表示的j元数据集中j=1，现在我们来尝试一元的线性回归。</p><ul><li>[1] 假设我们预测函数形式：$$f(x_{i})=\omega x_{i}+b_{i}$$,使得$$f(x_{i})\approx y_{i}$$.</li></ul><p>接下来我们引入上面的最小二乘法求参数$$\omega , b$$.</p><ul><li>[2] 假设最小均方误差函数为：</li></ul><p>$$e_{\omega^<em>,b^</em>}=arg_{(\omega,b)}min \sum_{i=1}^{m}(f(x_{i})-y_{i})^2 $$</p><ul><li><p>[3] 对上式e的函数分别对$$\omega,b$$求偏导，对偏导结果赋值0，求$$\omega,b$$值。</p></li><li><p>[4] 偏导数</p></li></ul><p>$$\frac{\partial E_{\omega,b}}{\partial \omega}=2(\omega\sum_{i=1}^{m}x_{i}^{2}-\sum_{i=1}^{m}(y_{i}-b)x_{i})$$</p><p>$$\frac{\partial E_{\omega,b}}{\partial b}=2(mb-\sum_{i=1}^{m}(y_{i} - \omega x_{i}))$$</p><ul><li>[5] 上一步骤中的偏导数都设为零，以此来求得$$\omega , b$$.</li></ul><p>$$\omega = \frac{\sum_{i=1}^{m} y_{i}(x_{i}-\bar{x})}{\sum_{i=1}^{m}x_{i}^{2}-\frac{1}{m}(\sum_{i=1}^{m}x_{i})^2}$$</p><p>$$b=\frac{1}{m}\sum_{i=1}^{m}(y_{i}-\omega x_{i}),\bar{x}=\frac{1}{m}\sum_{i=1}^{m}x_{i}$$,$$\bar{x}$$为序列x的均值。</p><blockquote><p>这里一元的线性回归，用最小二乘法求解的参数估计，称为线性回归模型的最小二乘法“参数估计”(parameter estimation).</p></blockquote><h2 id="2-2-多元线性回归"><a href="#2-2-多元线性回归" class="headerlink" title="2.2 多元线性回归"></a>2.2 多元线性回归</h2><p>类似一元，但是求解 估计的参数矩阵$$\omega, b$$，就需要全部看成矩阵的求解方法求出。见最小二乘法矩阵推导那一节，不再具体推推导了，在2.1节基础上明白线性回归，多元回归思想即可明白。</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.1.1 马尔科夫简单模型预测实战笔记</title>
      <link href="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-2-1-1-%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E7%AE%80%E5%8D%95%E6%A8%A1%E5%9E%8B%E9%A2%84%E6%B5%8B%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
      <url>/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-2-1-1-%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E7%AE%80%E5%8D%95%E6%A8%A1%E5%9E%8B%E9%A2%84%E6%B5%8B%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本篇文章笔记总结来自网络和书本，引用部分都有来源，内容主要介绍马尔科夫相关实际应用搞得入门例子，很简单，但是能说明马尔科夫的原理相关。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="马尔科夫简单模型预测实战笔记"><a href="#马尔科夫简单模型预测实战笔记" class="headerlink" title="马尔科夫简单模型预测实战笔记"></a>马尔科夫简单模型预测实战笔记</h1><h2 id="一、基于马尔可夫链的公交停靠站乘客数预测"><a href="#一、基于马尔可夫链的公交停靠站乘客数预测" class="headerlink" title="一、基于马尔可夫链的公交停靠站乘客数预测"></a>一、基于马尔可夫链的公交停靠站乘客数预测</h2><h3 id="1-1-题设"><a href="#1-1-题设" class="headerlink" title="1.1 题设"></a>1.1 题设</h3><ul><li><p>假设站点乘客数的状态具有马尔可夫性，当某一时刻有公交车停靠时， 会有一些乘客上车， 则下一时刻车辆到达时停靠站的乘客数与这一时刻剩余的乘客相关， 这一特征符合了马尔可夫链的马尔可夫性，同时在任意时刻的候车乘客只与上一时刻的乘客数相关， 而与候车时间无关。—-满足马尔科夫。</p></li><li><p>数据</p></li></ul><blockquote><p>以该停靠站点的候车乘客数为统计对象， 按照离散时间， 在状态转移中将以时间间隔为五分钟而对停靠站点的乘客数进行计数。以工作日某一天的上午8∶ 00 ～ 10∶ 00 的两小时为统计的时间段， 其中第一组数据为时刻 8∶05 时的乘客数， 可得到 24 组数据。如下图所示：</p></blockquote><p><img src="/image2/markovC_shiLi_1_1.png" alt="24组数据8-10点"></p><p>图1-1 8-10点的24组数据</p><p>由表 1 可知， 该站点的乘客数区间为［12， 27］，为保证预测的准确性， 根据建模步骤可将站点的乘客数分为 3 种状态， 即状态空间为( E1， E2， E3 ) ， 其中 E1 表示乘客数为 11 ～ 16， E2 表示乘客数为 17 ～22， E3 表示乘客数为 23 ～ 28， 因此有乘客数状态空间的频数分布， 如表 2 所示。</p><ul><li>于是得到对应上表的如下状态分布表</li></ul><p>表二</p><table><thead><tr><th style="text-align:left">时间点</th><th style="text-align:left">乘客人数</th><th style="text-align:center">时间表</th><th style="text-align:center">乘客人数</th><th style="text-align:right">时间表</th><th style="text-align:right">乘客人数</th><th style="text-align:center">时间表</th><th style="text-align:center">乘客人数</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">E1</td><td style="text-align:center">7</td><td style="text-align:center">E2</td><td style="text-align:right">13</td><td style="text-align:right">E1</td><td style="text-align:center">9</td><td style="text-align:center">E2</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">E1</td><td style="text-align:center">8</td><td style="text-align:center">E3</td><td style="text-align:right">14</td><td style="text-align:right">E2</td><td style="text-align:center">20</td><td style="text-align:center">E1</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">E2</td><td style="text-align:center">9</td><td style="text-align:center">E2</td><td style="text-align:right">15</td><td style="text-align:right">E2</td><td style="text-align:center">21</td><td style="text-align:center">E1</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">E2</td><td style="text-align:center">10</td><td style="text-align:center">E2</td><td style="text-align:right">16</td><td style="text-align:right">E3</td><td style="text-align:center">22</td><td style="text-align:center">E1</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">E2</td><td style="text-align:center">11</td><td style="text-align:center">E1</td><td style="text-align:right">17</td><td style="text-align:right">E3</td><td style="text-align:center">22</td><td style="text-align:center">E1</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">E2</td><td style="text-align:center">12</td><td style="text-align:center">E2</td><td style="text-align:right">18</td><td style="text-align:right">E2</td><td style="text-align:center">24</td><td style="text-align:center">E1</td></tr></tbody></table><p>于是可以得到状态转移频次表如下表所示：</p><p>表三</p><table><thead><tr><th style="text-align:left">单位(人)</th><th style="text-align:center">E1</th><th style="text-align:center">E2</th><th style="text-align:center">E3</th></tr></thead><tbody><tr><td style="text-align:left">E1</td><td style="text-align:center">5</td><td style="text-align:center">3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">E2</td><td style="text-align:center">3</td><td style="text-align:center">7</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">E3</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr></tbody></table><h3 id="1-2-计算模型"><a href="#1-2-计算模型" class="headerlink" title="1.2 计算模型"></a>1.2 计算模型</h3><p>根据马尔可夫变量的特征， 结合变量状态转移概率矩阵， 对站点乘客数的预测步骤如下:</p><p>统计时需注意: 引起乘客数状态变化的转入包括下车后仍留在站点候车的乘客; 引起乘客数状态变化的转出则包括经过停靠车辆后上车的乘客， 则有表 1。</p><p>由表二可统计得到如下信息：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">E1</th><th style="text-align:center">E2</th><th style="text-align:center">E3</th></tr></thead><tbody><tr><td style="text-align:center">当前统计总数(人)</td><td style="text-align:center">8</td><td style="text-align:center">12</td><td style="text-align:center">3</td></tr></tbody></table><p>由此可得到表三对应的转移概率矩阵，如下</p><table><thead><tr><th style="text-align:center">转移概率</th><th style="text-align:center">E1</th><th style="text-align:center">E2</th><th style="text-align:center">E3</th></tr></thead><tbody><tr><td style="text-align:center">E1</td><td style="text-align:center">5/8</td><td style="text-align:center">3/8</td><td style="text-align:center">0/8</td></tr><tr><td style="text-align:center">E2</td><td style="text-align:center">3/12</td><td style="text-align:center">7/12</td><td style="text-align:center">2/12</td></tr><tr><td style="text-align:center">E3</td><td style="text-align:center">0/3</td><td style="text-align:center">2/3</td><td style="text-align:center">1/3</td></tr></tbody></table><p>即：</p><table><thead><tr><th style="text-align:center">转移概率</th><th style="text-align:center">E1</th><th style="text-align:center">E2</th><th style="text-align:center">E3</th></tr></thead><tbody><tr><td style="text-align:center">E1</td><td style="text-align:center">0.625</td><td style="text-align:center">0.375</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">E2</td><td style="text-align:center">0.25</td><td style="text-align:center">0.58</td><td style="text-align:center">0.17</td></tr><tr><td style="text-align:center">E3</td><td style="text-align:center">0</td><td style="text-align:center">0.67</td><td style="text-align:center">0.33</td></tr></tbody></table><p><img src="/image2/MarkovSZ_1.2.1.png" alt="转移概率矩阵"></p><ul><li>设初始时刻的状态分布为10点的时刻。由于10点出行人数是14人，在E1(11~16)之间，故设出事时刻的概率分布为:</li></ul><p>N(0)=(1, 0, 0)</p><p>由N(1)=N(0).*P(1)=(0.625, 0.375, 0)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">markov</span><span class="params">()</span>:</span> </span><br><span class="line">    init_array = np.array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]) </span><br><span class="line">    transfer_matrix = np.array([[<span class="number">0.625</span>, <span class="number">0.375</span>, <span class="number">0</span>], </span><br><span class="line">                                [<span class="number">0.25</span>, <span class="number">0.58</span>, <span class="number">0.17</span>], </span><br><span class="line">                                [<span class="number">0</span>, <span class="number">0.67</span>, <span class="number">0.33</span>]]) </span><br><span class="line">    restmp = init_array </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>): </span><br><span class="line">        res = np.dot(restmp, transfer_matrix) </span><br><span class="line">        print(<span class="string">'N('</span>,i+<span class="number">1</span>,<span class="string">')'</span>, <span class="string">"\t"</span>, res ) </span><br><span class="line">        restmp = res </span><br><span class="line">  </span><br><span class="line">markov()</span><br></pre></td></tr></table></figure><p><img src="/image2/MarkovSZ_1.2.2.png" alt="代码运行结果"></p><blockquote><p>N(0), 代表10：00的乘客数。N(1)代表10:05分的乘客数.N(2)代表10:10分的乘客数，以此类推。</p></blockquote><ul><li>取上面设定的状态范围（11~16）， （17-22）， （18~28），分别对上面的取值区间做中值得到13.5， 19.5， 25.5； </li></ul><ul><li>设 E1=13.5, E2=19.5, E3=25.5.</li></ul><p>由10:05分的站点乘客数量状态分布，N(1)=[0.625, 0.375, 0],和E=[13.5, 19.5, 25.5]可求得10:05的期望值Ex</p><p>$$<br>E_{x}=\sum_{i=1}^{3} (N(1,i)*E(i)) = 0.625\times 13.5 + 0.375\times19.5 + 0\times25.5 = 15.75<br>$$</p><p><img src="/image2/MarkovSZ_1.2.3.png" alt="Ex的期望值"></p><blockquote><p>在概率论和统计学中，数学期望(mean)（或均值，亦简称期望）是试验中每次可能结果的概率乘以其结果的总和，是最基本的数学特征之一。它反映随机变量平均取值的大小。</p></blockquote><p>即，在10:05的时刻，车站人数最可能有15.75个人在等车。</p><p>同理在10:10分，N(2)=[0.484375, 0.451875, 0.06375], 则此时刻（10:05），车站最可能（该时刻的期望值）出现的候车人数经计算为： 16.7503125（人），具体计算过程如下：</p><p>$$<br>E_{x}=\sum_{i=1}^{3} (N(1,i)*E(i))<br>     = 0.484375\times 13.5 + 0.451875\times19.5 + 0.06375\times25.5<br>     = 16.7503125<br>$$</p><ul><li>推荐下<a href="https://www.codecogs.com/latex/eqneditor.php" target="_blank" rel="noopener">在线Latex公式编辑网站</a></li></ul><p><img src="/image2/MarkovSZ_1.2.4.png" alt="10:05时刻人数统计的期望值"></p><p>10:15时刻，10:20时刻，10:25时刻，……计算方法一次类推，于是可得到整个时间段站台候车人数的预测表，如下表：</p><table><thead><tr><th style="text-align:left">时刻</th><th style="text-align:left">状态</th><th style="text-align:left">转移率</th><th style="text-align:left">站台乘客数预测值</th><th style="text-align:left">站台人数实际值</th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:left">E1</td><td style="text-align:left">0.625</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">10:05</td><td style="text-align:left">E2</td><td style="text-align:left">0.375</td><td style="text-align:left">15.75</td><td style="text-align:left">14</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">E3</td><td style="text-align:left">0</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">E1</td><td style="text-align:left">0.484375</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">10:10</td><td style="text-align:left">E2</td><td style="text-align:left">0.50358792</td><td style="text-align:left">16.7503125</td><td style="text-align:left">16</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">E3</td><td style="text-align:left">0.09785625</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">E1</td><td style="text-align:left">0.38142461</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">10:15</td><td style="text-align:left">E2</td><td style="text-align:left">0.50358792</td><td style="text-align:left">17.90137716</td><td style="text-align:left">17</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">E3</td><td style="text-align:left">0.11498747</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">E1</td><td style="text-align:left">0.36428736</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">10:20</td><td style="text-align:left">E2</td><td style="text-align:left">0.51215683</td><td style="text-align:left">18.0556107</td><td style="text-align:left">18</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">E3</td><td style="text-align:left">0.12355581</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">E1</td><td style="text-align:left">0.35571881</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">10:25</td><td style="text-align:left">E2</td><td style="text-align:left">0.51644111</td><td style="text-align:left">18.13272762</td><td style="text-align:left">18</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">E3</td><td style="text-align:left">0.12784008</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">E1</td><td style="text-align:left">0.35143453</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">10:30</td><td style="text-align:left">E2</td><td style="text-align:left">0.51858325</td><td style="text-align:left">18.17128614</td><td style="text-align:left">18</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">E3</td><td style="text-align:left">0.12998222</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr></tbody></table><ul><li>以上的基于马尔科夫的模型预测和实际值的趋势图如下图所示：</li></ul><p><img src="/image2/MarkovSZ_1.2.5.png" alt="Markov预测结果和实际结果对比"></p><p>图像在线生成：<a href="http://charts.udpwork.com/" target="_blank" rel="noopener">推荐下在线绘图做表的网站</a></p><blockquote><p>预测结果表明在马尔可夫链理论下的预测会受到时间长短的影响， 在短时间内的统计， 预测结果与实际值间的误差较为明显， 当统计量足够多时， 预测的趋势会更加符合实际情况。</p></blockquote><ul><li><a href="https://blog.csdn.net/zhujialiang18/article/details/80745878" target="_blank" rel="noopener">C-K方程( Chapman- Kolmogorov方程)-马尔可夫链定义如下:</a></li></ul><p><img src="/image2/markovC_K_part1.png" alt="C-K方程"></p><p><img src="/image2/markovC_K_part2.png" alt="C-K方程"></p><p><img src="/image2/markovC_K_part3.png" alt="C-K方程"></p><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><p>[1]刘哲华.基于马尔可夫链的公交停靠站乘客数预测[J].黑龙江交通科技,2018,41(11):155-157.</p><h2 id="二、最佳经营策略应用"><a href="#二、最佳经营策略应用" class="headerlink" title="二、最佳经营策略应用"></a>二、最佳经营策略应用</h2>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.1 马尔科夫链</title>
      <link href="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-2-1-%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E9%93%BE/"/>
      <url>/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-2-1-%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。 </li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本篇文章笔记总结来自网络和书本，引用部分都有来源，内容主要介绍马尔科夫相关的性质和几个实例进行论述。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="马尔科夫链"><a href="#马尔科夫链" class="headerlink" title="马尔科夫链"></a>马尔科夫链</h1><h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>状态空间中经过从一个状态到另一个状态的转换的随机过程，需要具备“无记忆”的性质：下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关。这种特定类型的“无记忆性”称作马尔可夫性质。</p><h2 id="一、常见的马尔可夫过程："><a href="#一、常见的马尔可夫过程：" class="headerlink" title="一、常见的马尔可夫过程："></a>一、常见的马尔可夫过程：</h2><p>(1) 独立随机过程为马尔可夫过程。</p><p>(2) 独立增量过程为马尔可夫过程：没{X(t)，t∈[0，+∞)}为一独立增量过程，且有P(X(0)=x0)=1，x0为常数，则X(t)为马尔可夫过程。</p><p>(3) 泊松过程为马尔可夫过程。</p><p>(4) 维纳过程为马尔可夫过程。</p><p>(5) 质点随机游动过程为马尔可夫过程。</p><h2 id="二、模型的创立条件"><a href="#二、模型的创立条件" class="headerlink" title="二、模型的创立条件"></a>二、模型的创立条件</h2><ul><li>无后效性—只与前一时刻状态相关和其他历史时刻无关。</li></ul><p><img src="/image2/markovFormula.png" alt="markovFormula"></p><p>图2-1 马尔科夫表示式</p><ul><li>系统平稳性—平稳分布（马尔可夫链的）具有某种不变（或者说平稳）性质的概率分布。</li></ul><p><img src="/image2/markovPW.png" alt="马尔科夫平稳性"></p><p>图2-2 马尔科夫平稳分布表示式</p><h3 id="2-1-无后效性"><a href="#2-1-无后效性" class="headerlink" title="2.1 无后效性"></a>2.1 无后效性</h3><p>状态空间中经过从一个状态到另一个状态的转换的随机过程。该过程要求具备“无记忆”的性质：下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关。这种特定类型的“无记忆性”称作马尔可夫性质。马尔科夫链作为实际过程的统计模型具有许多应用。</p><p>在马尔可夫链的每一步，系统根据概率分布，可以从一个状态变到另一个状态，也可以保持当前状态。状态的改变叫做转移，与不同的状态改变相关的概率叫做转移概率。随机漫步就是马尔可夫链的例子。随机漫步中每一步的状态是在图形中的点，每一步可以移动到任何一个相邻的点，在这里移动到每一个点的概率都是相同的（无论之前漫步路径是如何的）。</p><hr><p>作者：bitcarmanlee<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/bitcarmanlee/article/details/82819860" target="_blank" rel="noopener">https://blog.csdn.net/bitcarmanlee/article/details/82819860</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p><h3 id="2-2-平稳分布概念"><a href="#2-2-平稳分布概念" class="headerlink" title="2.2 平稳分布概念"></a>2.2 平稳分布概念</h3><ul><li>平稳分布是一种概率分布。平稳分布（马尔可夫链的）具有某种不变（或者说平稳）性质的概率分布。</li></ul><p><img src="/image2/Markov_PWBK.png" alt="马尔科夫百科"></p><p>图2-3 平稳分布，百度百科解释</p><h2 id="三、马尔科夫相关的例子"><a href="#三、马尔科夫相关的例子" class="headerlink" title="三、马尔科夫相关的例子"></a>三、马尔科夫相关的例子</h2><p>直接看理论是有点头痛的，但是接下来直接上例子，学习致用，在应用中学习。</p><h3 id="3-1-马尔科夫股市模型实例"><a href="#3-1-马尔科夫股市模型实例" class="headerlink" title="3.1 马尔科夫股市模型实例"></a>3.1 马尔科夫股市模型实例</h3><p>假设股市三种状态：牛市（Bull market）, 熊市（Bear market）和横盘（Stagnant market），每一个状态都以一定的概率转化到下一个状态。</p><h4 id="3-1-题设"><a href="#3-1-题设" class="headerlink" title="3.1 题设"></a>3.1 题设</h4><p><img src="/image2/markovSample1_1.png" alt="股市概率转移状态图"></p><p>图3-1 股市概率转移状态图</p><p>比如，牛市以0.025的概率转化到横盘的状态。这个状态概率转化图可以以矩阵的形式表示。如果我们定义矩阵阵P某一位置P(i, j)的值为P(j|i)， <strong>即从状态i变为状态j的概率</strong> 。另外定义牛市、熊市、横盘的状态分别为0、1、2，这样我们得到了马尔科夫链模型的状态转移矩阵为：</p><p><img src="/image2/markovSample1_2.png" alt="马尔科夫状态转移概率矩阵"></p><p>图3-2 马尔科夫状态转移概率矩阵</p><p>当这个状态转移矩阵P确定以后，整个股市模型就已经确定！</p><h4 id="3-1-1-用计算结果说明马尔科夫的性质（无后效性，和系统平稳性）"><a href="#3-1-1-用计算结果说明马尔科夫的性质（无后效性，和系统平稳性）" class="headerlink" title="3.1.1 用计算结果说明马尔科夫的性质（无后效性，和系统平稳性）"></a>3.1.1 用计算结果说明马尔科夫的性质（无后效性，和系统平稳性）</h4><ul><li>步骤一、假设初始状态：t0​=[0.1,0.2,0.7]，然后算之后的状态。</li><li>步骤二、计算方法是用这个初始的状态分布概率向量(t0)点乘我们的马尔科夫状态转移概率矩阵(P)。</li><li>如图2-2 所说的，当P^n –&gt; 会趋向一个稳定的转移概率矩阵。</li></ul><p><a href="./Attachment/markovDemo.py">Python 代码验证</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">markov</span><span class="params">()</span>:</span> </span><br><span class="line">    init_array = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.7</span>]) </span><br><span class="line">    transfer_matrix = np.array([[<span class="number">0.9</span>, <span class="number">0.075</span>, <span class="number">0.025</span>], </span><br><span class="line">                                [<span class="number">0.15</span>, <span class="number">0.8</span>, <span class="number">0.05</span>], </span><br><span class="line">                                [<span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0.5</span>]]) </span><br><span class="line">    restmp = init_array <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>): </span><br><span class="line">        res = np.dot(restmp, transfer_matrix) </span><br><span class="line">        <span class="keyword">print</span> i, <span class="string">"\t"</span>, </span><br><span class="line">        res restmp = res </span><br><span class="line">markov()</span><br></pre></td></tr></table></figure><p>执行以上代码后，输出结果，如图所示</p><p><img src="/image2/markovGuShi_1.png" alt="马尔科夫股市代码输出"></p><p>图3-3 马尔科夫股市代码输出</p><p>从第18次开始，状态就开始收敛至[0.624,0.312,0.0625]。最终数字上略有不同，只是计算机浮点数运算造成的罢了。</p><p>如果我们换一个初始状态t0​，比如[0.2,0.3.0.5]，继续运行上面的代码，只是将init_array变一下，最后结果为：</p><p><img src="/image2/markovGuShi_2.png" alt="马尔科夫股市代码输出"></p><p>到第18次的时候，又收敛到了[0.624,0.312,0.0625]!<br>这个转移矩阵就厉害了。不管我们的初始状态是什么样子的，只要状态转移矩阵不发生变化，当n→∞时，最终状态始终会收敛到一个固定值。</p><h4 id="3-1-2-后续接着代码验证-图2-2-马尔科夫平稳分布表示式（3点）"><a href="#3-1-2-后续接着代码验证-图2-2-马尔科夫平稳分布表示式（3点）" class="headerlink" title="3.1.2 后续接着代码验证 图2-2 马尔科夫平稳分布表示式（3点）"></a>3.1.2 后续接着代码验证 图2-2 马尔科夫平稳分布表示式（3点）</h4><p>我们也看看这个状态转移矩阵P的25(本是n-&gt;∞幂次方) 幂次方有什么有意思的地方？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matrixpower</span><span class="params">()</span>:</span> </span><br><span class="line">    transfer_matrix = np.array([[<span class="number">0.9</span>, <span class="number">0.075</span>, <span class="number">0.025</span>], </span><br><span class="line">                                [<span class="number">0.15</span>, <span class="number">0.8</span>, <span class="number">0.05</span>], </span><br><span class="line">                                [<span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0.5</span>]]) </span><br><span class="line">    restmp = transfer_matrix </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>): </span><br><span class="line">        res = np.dot(restmp, transfer_matrix) </span><br><span class="line">        <span class="keyword">print</span> i, <span class="string">"\t"</span>, res </span><br><span class="line">        restmp = res </span><br><span class="line">matrixpower()</span><br></pre></td></tr></table></figure><p>执行以上代码</p><p><img src="/image2/markovGuShi_3.png" alt="马尔科夫股市代码输出"></p><p>发现了，从第20次开始，结果开始收敛，并且每一行都为[0.625,0.312,0.0625]!</p><p>再次验证了图2.2的定理0.4.2的 </p><p><img src="/image2/markovGuShi_4.png" alt="马尔科夫股市代码输出"></p><hr><h3 id="3-2-马尔科夫的人类上中下阶层分布模型"><a href="#3-2-马尔科夫的人类上中下阶层分布模型" class="headerlink" title="3.2 马尔科夫的人类上中下阶层分布模型"></a>3.2 马尔科夫的人类上中下阶层分布模型</h3><p>假设，社会学家把人按其经济状况分为3类：下层，中层，上层，我们用1,2,3表示这三个阶层。社会学家发现决定一个人的收入阶层最重要的因素就是其父母的收入阶层。如果一个人的收入属于下层类别，则它的孩子属于下层收入的概率为0.65，属于中层收入的概率为0.28，属于上层收入的概率为0.07。从父代到子代，收入阶层转移概率如下</p><p><img src="/image2/markovJieceng_3_1_2_1.png" alt="马尔科夫阶层分布模型"></p><ul><li>我们用P表示这个转移矩阵，则</li></ul><p><img src="/image2/markovJieceng_3_1_2_2.png" alt="马尔科夫阶层分布模型"></p><ul><li>假设第1代人的阶层比例为</li></ul><p><img src="/image2/markovJieceng_3_1_2_3.png" alt="马尔科夫阶层分布模型"></p><ul><li>则前10代人的阶层分布如下</li></ul><blockquote><p>第二代人是第一代任PI0，点乘以P（转移概率），<br>第三代人是第二代人点乘以P</p></blockquote><p><img src="/image2/markovJieceng_3_1_2_4.png" alt="马尔科夫阶层分布模型"></p><p>我们可以看到，在相同的转移矩阵作用下，状态变化最终会趋于平稳。对于第n代人的阶层分布，我们有</p><p><img src="/image2/markovJieceng_3_1_2_5.png" alt="马尔科夫阶层分布模型"></p><p>从表达式上我们可以看到，π是一维向量，P是两维矩阵，P进行足够多次自乘后，值趋于<strong>稳定</strong>。</p><h4 id="3-2-1-马尔科夫的人类农村转城市人口分布模型"><a href="#3-2-1-马尔科夫的人类农村转城市人口分布模型" class="headerlink" title="3.2.1 马尔科夫的人类农村转城市人口分布模型"></a>3.2.1 马尔科夫的人类农村转城市人口分布模型</h4><p>假设城市化进程中，农村人转移为城市人的概率为0.5，城市人转移为农村人的概率为0.1。</p><table><thead><tr><th style="text-align:center">人口</th><th style="text-align:center">农村人</th><th style="text-align:center">城市人</th></tr></thead><tbody><tr><td style="text-align:center">农村人</td><td style="text-align:center">0.5</td><td style="text-align:center">0.5</td></tr><tr><td style="text-align:center">城市人</td><td style="text-align:center">0.1</td><td style="text-align:center">0.9</td></tr></tbody></table><p>假设一开始有100个农村人，0个城市人，每代转移人数矩阵如下</p><table><thead><tr><th style="text-align:center">代数</th><th style="text-align:center">农村人</th><th style="text-align:center">城市人</th><th style="text-align:center">农村人转移为城市人</th><th style="text-align:center">城市人转移为农村人</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">100</td><td style="text-align:center">0</td><td style="text-align:center">50</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">50</td><td style="text-align:center">50</td><td style="text-align:center">25</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">30</td><td style="text-align:center">70</td><td style="text-align:center">15</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">22</td><td style="text-align:center">78</td><td style="text-align:center">11</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">19</td><td style="text-align:center">81</td><td style="text-align:center">10</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">17</td><td style="text-align:center">83</td><td style="text-align:center">8</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">17</td><td style="text-align:center">83</td><td style="text-align:center">8</td><td style="text-align:center">8</td></tr></tbody></table><p>可以看到，城市化进程中马尔科夫平稳状态就是农村人转移为城市人的速度等于城市人转移为农村人的速度。对于上述转移矩阵P，平稳分布为农村人17%，城市人83%。如果我们可以得到当前中国城市化转移矩阵P，我们就可以算出中国最终城市化率大概为多少（这里不考虑P的变化）。同时如果我们知道了中国城市化人口比例，我们就能知道城市化进程还可以持续多少代人。</p><h3 id="3-3-车站候车人数预测模型"><a href="#3-3-车站候车人数预测模型" class="headerlink" title="3.3 车站候车人数预测模型"></a>3.3 车站候车人数预测模型</h3><p>具体的实例过程请移步 <strong>[2.1.1 马尔科夫简单模型预测实战笔记]</strong> 章节部分</p><hr><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><h3 id="4-1-马尔科夫的平稳随机性"><a href="#4-1-马尔科夫的平稳随机性" class="headerlink" title="4.1 马尔科夫的平稳随机性"></a>4.1 马尔科夫的平稳随机性</h3><ul><li><p>非周期马氏链：马氏链转移要收敛，就一定不能是周期性的。不做特别处理，我们处理的问题基本上都是非周期性的</p></li><li><p>存在概率转移矩阵P，任意两个状态是连通的，如上，例题中的每个不同的阶层人的角色通过某种方式，他们之间是可以相互转化，前后转化的两种状态是联通的可以转化的，底层人士可以转化成中层等。</p></li></ul><blockquote><p>不论初始状态是什么，经过足够多次概率转移后，会存在一个稳定的状态π。<br>概率转移矩阵自乘足够多次后，每行值相等。即</p></blockquote><p><img src="/image2/markov4_1.png" alt="马尔科夫总结"></p><ul><li>显然，由于马氏链稳定后，所有状态转移到状态j的概率之和稳定。</li></ul><p><img src="/image2/markov4_2.png" alt="马尔科夫总结"></p><ul><li>则π为马氏链稳定状态，并且π是方程π=πP的唯一非负解。结合上面结论，很明显。</li></ul><p><img src="/image2/markov4_3.png" alt="马尔科夫总结"></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网页设计基础笔记</title>
      <link href="/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
      <url>/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<center> Porter Pan </center><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul><li>网页效果图设计，可以Fireworks,也可以Photoshop以及其他的平面设计软件</li><li>根据网页效果图进行切图<blockquote><p>为什么要切图：提高网站下载速率，规律：能用CSS效果表现出来的就少用图像，也是为了提高下载速率</p></blockquote></li></ul><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 安利 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简单的方法，获取在线付费设计log的方法</title>
      <link href="/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E8%B6%8A%E8%BF%87%E4%BB%98%E8%B4%B9%E8%8E%B7%E5%8F%96%E5%9C%A8%E7%BA%BF%E7%9A%84log%E8%AE%BE%E8%AE%A1/"/>
      <url>/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E8%B6%8A%E8%BF%87%E4%BB%98%E8%B4%B9%E8%8E%B7%E5%8F%96%E5%9C%A8%E7%BA%BF%E7%9A%84log%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<center> Porter Pan </center><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>有时人穷则需要志坚，花别人返工心情的时间，做别人不愿做的尝试。</p><ul><li>今天的目标对象是他：<a href="https://www.logosc.cn" target="_blank" rel="noopener">Log设计网</a></li></ul><blockquote><p>不是我不支持他，而是因为，太穷，没那么多钱钱，用到啥买啥，所以，看能省钱的地方就省了吧。</p></blockquote><blockquote><p>本文档是教如何免费获取99元套餐的log设计资源。</p></blockquote><a id="more"></a><h3 id="点击进入Log官网的个人中心"><a href="#点击进入Log官网的个人中心" class="headerlink" title="点击进入Log官网的个人中心"></a>点击进入<a href="https://www.logosc.cn/edit" target="_blank" rel="noopener">Log官网</a>的个人中心</h3><ul><li>选择你目前编辑的Log</li><li>点击页面的分享</li><li>在浏览页面中鼠标右键，进入inspect界面</li><li>点击Source</li><li>查看源码</li><li>搜索关键字“jpg”</li><li>复制图片链接，下载，好了，这就是你自己的Log了</li></ul><p>以上步骤结束，不贴图了，贴图影响不好了</p>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 安利 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git中忽略提交项</title>
      <link href="/gitignre-%E9%85%8D%E7%BD%AE/"/>
      <url>/gitignre-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h1><p>本文记录了git的忽略提交的git规则配置，及一些举例。</p><p><a href="https://www.cnblogs.com/kevingrace/p/5690241.html" target="_blank" rel="noopener">参考博客资料</a></p><a id="more"></a><h3 id="在Git项目中定义-gitignore文件"><a href="#在Git项目中定义-gitignore文件" class="headerlink" title="在Git项目中定义.gitignore文件"></a>在Git项目中定义.gitignore文件</h3><p>对于经常使用Git的朋友来说，.gitignore配置一定不会陌生。这种方式通过在项目的某个文件夹下定义.gitignore文件，在该文件中定义相应的忽略规则，来管理当前文件夹下的文件的Git提交行为。.gitignore 文件是可以提交到公有仓库中，这就为该项目下的所有开发者都共享一套定义好的忽略规则。在.gitingore 文件中，遵循相应的语法，在每一行指定一个忽略规则。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*.log</span><br><span class="line">*.temp</span><br><span class="line">/vendor</span><br></pre></td></tr></table></figure><h3 id="在Git项目的设置中指定排除文件"><a href="#在Git项目的设置中指定排除文件" class="headerlink" title="在Git项目的设置中指定排除文件"></a>在Git项目的设置中指定排除文件</h3><p>这种方式只是临时指定该项目的行为，需要编辑当前项目下的 .git/info/exclude文件，然后将需要忽略提交的文件写入其中。需要注意的是，这种方式指定的忽略文件的根目录是项目根目录。</p><h3 id="定义Git全局的-gitignore-文件"><a href="#定义Git全局的-gitignore-文件" class="headerlink" title="定义Git全局的 .gitignore 文件"></a>定义Git全局的 .gitignore 文件</h3><p>除了可以在项目中定义 .gitignore 文件外，还可以设置全局的git .gitignore文件来管理所有Git项目的行为。这种方式在不同的项目开发者之间是不共享的，是属于项目之上Git应用级别的行为。这种方式也需要创建相应的 .gitignore 文件，可以放在任意位置。然后在使用以下命令配置Git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># git config --global core.excludesfile ~/.gitignore</span><br></pre></td></tr></table></figure><p>首先要强调一点，这个文件的完整文件名就是”.gitignore”，注意最前面有个“.”。一般来说每个Git项目中都需要一个“.gitignore”文件，这个文件的作用就是告诉Git哪些文件不需要添加到版本管理中。实际项目中，很多文件都是不需要版本管理的，比如Python的.pyc文件和一些包含密码的配置文件等等。这个文件的内容是一些规则，Git会根据这些规则来判断是否将文件添加到版本控制中。</p><h3 id="Git忽略文件的原则"><a href="#Git忽略文件的原则" class="headerlink" title="Git忽略文件的原则"></a>Git忽略文件的原则</h3><ul><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ul><h3 id="gitignore文件的使用方法"><a href="#gitignore文件的使用方法" class="headerlink" title=".gitignore文件的使用方法"></a>.gitignore文件的使用方法</h3><ul><li>首先，在你的工作区新建一个名称为.gitignore的文件。</li><li>然后，把要忽略的文件名填进去，Git就会自动忽略这些文件。<blockquote><p>不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。</p></blockquote></li></ul><blockquote><p>有时对于git项目下的某些文件，我们不需要纳入版本控制，比如日志文件或者IDE的配置文件，此时可以在项目的根目录下建立一个隐藏文件</p></blockquote><blockquote><p>.gitignore（linux下以.开头的文件都是隐藏文件），然后在.gitignore中写入需要忽略的文件。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kevin ~]<span class="comment"># cat .gitignore</span></span><br><span class="line">*.xml</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">*.apk</span><br></pre></td></tr></table></figure><p>.gitignore注释用’#’, *表示匹配0个或多个任意字符，所以上面的模式就是要忽略所有的xml文件,log文件和apk文件。</p><p>.gitignore配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为版本管理带来很大的便利。</p><h3 id="gitignore忽略规则的优先级"><a href="#gitignore忽略规则的优先级" class="headerlink" title=".gitignore忽略规则的优先级"></a>.gitignore忽略规则的优先级</h3><p>在 .gitingore 文件中，每一行指定一个忽略规则，Git检查忽略规则的时候有多个来源，它的优先级如下（由高到低）：</p><p>1）从命令行中读取可用的忽略规则</p><p>2）当前目录定义的规则</p><p>3）父级目录定义的规则，依次递推</p><p>4）$GIT_DIR/info/exclude 文件中定义的规则</p><p>5）core.excludesfile中定义的全局规则</p><h3 id="gitignore忽略规则的匹配语法"><a href="#gitignore忽略规则的匹配语法" class="headerlink" title=".gitignore忽略规则的匹配语法"></a>.gitignore忽略规则的匹配语法</h3><p>在 .gitignore 文件中，每一行的忽略规则的语法如下：<br>1）空格不匹配任意文件，可作为分隔符，可用反斜杠转义<br>2）以“＃”开头的行都会被 Git 忽略。即#开头的文件标识注释，可以使用反斜杠进行转义。<br>3）可以使用标准的glob模式匹配。所谓的glob模式是指shell所使用的简化了的正则表达式。<br>4）以斜杠”/“开头表示目录；”/“结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件；”/“开始的模式匹配项目跟目录；如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录。<br>5）以星号”*”通配多个字符，即匹配多个任意字符；使用两个星号”<strong>“ 表示匹配任意中间目录，比如`a/</strong>/z`可以匹配 a/z, a/b/z 或 a/b/c/z等。<br>6）以问号”?”通配单个字符，即匹配一个任意字符；<br>7）以方括号”[]”包含单个字符的匹配列表，即匹配任何一个列在方括号中的字符。比如[abc]表示要么匹配一个a，要么匹配一个b，要么匹配一个c；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配。比如[0-9]表示匹配所有0到9的数字，[a-z]表示匹配任意的小写字母）。<br>8）以叹号”!”表示不忽略(跟踪)匹配到的文件或目录，即要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。需要特别注意的是：如果文件的父目录已经被前面的规则排除掉了，那么对这个文件用”!”规则是不起作用的。也就是说”!”开头的模式表示否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用”!”也不会再次被包含。可以使用反斜杠进行转义。</p><p>需要谨记：git对于.ignore配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</p><h3 id="gitignore忽略规则简单说明"><a href="#gitignore忽略规则简单说明" class="headerlink" title=".gitignore忽略规则简单说明"></a>.gitignore忽略规则简单说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#               表示此为注释,将被Git忽略</span></span><br><span class="line">*.a             表示忽略所有 .a 结尾的文件</span><br><span class="line">!lib.a          表示但lib.a除外</span><br><span class="line">/TODO           表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class="line">build/          表示忽略 build/目录下的所有文件，过滤整个build文件夹；</span><br><span class="line">doc/*.txt       表示会忽略doc/notes.txt但不包括 doc/server/arch.txt</span><br><span class="line"> </span><br><span class="line">bin/:           表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件</span><br><span class="line">/bin:           表示忽略根目录下的bin文件</span><br><span class="line">/*.c:           表示忽略cat.c，不忽略 build/cat.c</span><br><span class="line">debug/*.obj:    表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj</span><br><span class="line">**/foo:         表示忽略/foo,a/foo,a/b/foo等</span><br><span class="line">a/**/b:         表示忽略a/b, a/x/b,a/x/y/b等</span><br><span class="line">!/bin/run.sh    表示不忽略bin目录下的run.sh文件</span><br><span class="line">*.<span class="built_in">log</span>:          表示忽略所有 .<span class="built_in">log</span> 文件</span><br><span class="line">config.php:     表示忽略当前路径的 config.php 文件</span><br><span class="line"> </span><br><span class="line">/mtk/           表示过滤整个文件夹</span><br><span class="line">*.zip           表示过滤所有.zip文件</span><br><span class="line">/mtk/do.c       表示过滤某个具体文件</span><br><span class="line"> </span><br><span class="line">被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。</span><br><span class="line"> </span><br><span class="line">需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下：</span><br><span class="line">!*.zip</span><br><span class="line">!/mtk/one.txt</span><br><span class="line"> </span><br><span class="line">唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？</span><br><span class="line">想象一个场景：假如我们只需要管理/mtk/目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么.gitignore规则应写为：：</span><br><span class="line">/mtk/*</span><br><span class="line">!/mtk/one.txt</span><br><span class="line"> </span><br><span class="line">假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！</span><br><span class="line">注意上面的/mtk/*不能写为/mtk/，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！</span><br><span class="line"> </span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line">还有一些规则如下：</span><br><span class="line">fd1/*</span><br><span class="line">说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；</span><br><span class="line"> </span><br><span class="line">/fd1/*</span><br><span class="line">说明：忽略根目录下的 /fd1/ 目录的全部内容；</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line">!.gitignore</span><br><span class="line">!/fw/ </span><br><span class="line">/fw/*</span><br><span class="line">!/fw/bin/</span><br><span class="line">!/fw/sf/</span><br><span class="line">说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。</span><br></pre></td></tr></table></figure><ul><li>温馨提示：<blockquote><p>如果你不慎在创建.gitignore文件之前就push了项目，那么即使你在.gitignore文件中写入新的过滤规则，这些规则也不会起作用，Git仍然会对所有文件进行版本管理。简单来说出现这种问题的原因就是Git已经开始管理这些文件了，所以你无法再通过过滤规则过滤它们。所以大家一定要养成在项目开始就创建.gitignore文件的习惯，否则一单push，处理起来会非常麻烦。</p></blockquote></li></ul><h3 id="gitignore忽略规则常用示例"><a href="#gitignore忽略规则常用示例" class="headerlink" title=".gitignore忽略规则常用示例"></a>.gitignore忽略规则常用示例</h3><p>1）示例</p><blockquote><p>比如你的项目是java项目，.java文件编译后会生成.class文件，这些文件多数情况下是不想被传到仓库中的文件。这时候你可以直接适用github的<a href="https://github.com/github/gitignore/blob/master/Java.gitignore" target="_blank" rel="noopener">.gitignore文件模板</a>将这些忽略文件信息复制到你的.gitignore文件中去：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Compiled class file</span></span><br><span class="line">*.class</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Log file</span></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># BlueJ files</span></span><br><span class="line">*.ctxt</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Mobile Tools for Java (J2ME)</span></span><br><span class="line">.mtj.tmp/</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Package Files #</span></span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"> </span><br><span class="line"><span class="comment"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span></span><br><span class="line">hs_err_pid*</span><br></pre></td></tr></table></figure><p>可以看到github为我们提供了最流行的.gitignore文件配置。保存.ignore文件后我们查看下git status，检查下是否还有我们不需要的文件会被添加到git中去：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"> </span><br><span class="line">Initial commit</span><br><span class="line"> </span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"> </span><br><span class="line">        new file:   .gitignore</span><br><span class="line">        new file:   HelloWorld.java</span><br><span class="line"> </span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"> </span><br><span class="line">        Config.ini</span><br></pre></td></tr></table></figure></p><p>比如我的项目目录下有一个Config.ini文件，这个是个本地配置文件我不希望上传到git中去，我们可以在gitignore文件中添加这样的配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Config.ini</span><br></pre></td></tr></table></figure></p><p>或者你想忽略所有的.ini文件你可以这样写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.ini</span><br></pre></td></tr></table></figure></p><p>如果有些文件已经被你忽略了，当你使用git add时是无法添加的，比如我忽略了*.class，现在我想把HelloWorld.class添加到git中去：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add HelloWorld.class</span><br><span class="line">The following paths are ignored by one of your .gitignore files:</span><br><span class="line">HelloWorld.class</span><br><span class="line">Use -f <span class="keyword">if</span> you really want to add them.</span><br></pre></td></tr></table></figure></p><p>git会提示我们这个文件已经被我们忽略了，需要加上-f参数才能强制添加到git中去：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"> </span><br><span class="line">Initial commit</span><br><span class="line"> </span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"> </span><br><span class="line">        new file:   .gitignore</span><br><span class="line">        new file:   HelloWorld.class</span><br><span class="line">        new file:   HelloWorld.java</span><br></pre></td></tr></table></figure></p><p>这样就能强制添加到缓存中去了。如果我们意外的将想要忽略的文件添加到缓存中去了，我们可以使用rm命令将其从中移除：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git rm HelloWorld.class --cached</span><br><span class="line">rm <span class="string">'HelloWorld.class'</span></span><br></pre></td></tr></table></figure></p><p>如果你已经把不想上传的文件上传到了git仓库，那么你必须先从远程仓库删了它，我们可以从远程仓库直接删除然后pull代码到本地仓库这些文件就会本删除，或者从本地删除这些文件并且在.gitignore文件中添加这些你想忽略的文件，然后再push到远程仓库。</p><p>2）示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">下面是曾经线上使用过的一个gerrit里项目代码的.gitignore的配置（在项目中添加.gitignore过滤文件，在git push到gerrit里即可）</span><br><span class="line">[wangshibo@gerrit-server hq_ios]$ cat .gitignore</span><br><span class="line"><span class="comment">#Built application files</span></span><br><span class="line">*.apk</span><br><span class="line">*.ap_</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Files for the Dalvik VM</span></span><br><span class="line">*.dex</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Java class files</span></span><br><span class="line">*.class</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Generated files</span></span><br><span class="line">*/bin/</span><br><span class="line">*/gen/</span><br><span class="line">*/out/</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Gradle files</span></span><br><span class="line">.gradle/</span><br><span class="line">build/</span><br><span class="line">*/build/</span><br><span class="line">gradlew</span><br><span class="line">gradlew.bat</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Local configuration file (sdk path, etc)</span></span><br><span class="line">local.properties</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Proguard folder generated by Eclipse</span></span><br><span class="line">proguard/</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Log Files</span></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Android Studio Navigation editor temp files</span></span><br><span class="line">.navigation/</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Android Studio captures folder</span></span><br><span class="line">captures/</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Intellij</span></span><br><span class="line">*.iml</span><br><span class="line">*/*.iml</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Keystore files</span></span><br><span class="line"><span class="comment">#*.jks</span></span><br><span class="line"><span class="comment">#gradle wrapper</span></span><br><span class="line">gradle/</span><br><span class="line">  </span><br><span class="line"><span class="comment">#some local files</span></span><br><span class="line">*/.settings/</span><br><span class="line">*/.DS_Store</span><br><span class="line">.DS_Store</span><br><span class="line">*/.idea/</span><br><span class="line">.idea/</span><br><span class="line">gradlew</span><br><span class="line">gradlew.bat</span><br><span class="line">unused.txt</span><br></pre></td></tr></table></figure></p><p>3）示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[wangshibo@gerrit-server hq_ios$ cat .gitignore</span><br><span class="line"><span class="comment"># Lines that start with '#' are comments.</span></span><br><span class="line"><span class="comment"># IntelliJ IDEA Project files</span></span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line">*.iws</span><br><span class="line">out</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Eclipse Project files</span></span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings/</span><br><span class="line">  </span><br><span class="line">bin/</span><br><span class="line">gen/</span><br><span class="line">local.properties</span><br><span class="line">  </span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">  </span><br><span class="line">*.bak</span><br><span class="line">*.tem</span><br><span class="line">*.temp</span><br><span class="line"><span class="comment">#.swp</span></span><br><span class="line">*.*~</span><br><span class="line">~*.*</span><br></pre></td></tr></table></figure></p><h3 id="gitignor忽略规则查看"><a href="#gitignor忽略规则查看" class="headerlink" title=".gitignor忽略规则查看"></a>.gitignor忽略规则查看</h3><p>如果你发下.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git check-ignore -v HelloWorld.class</span><br><span class="line">.gitignore:1:*.class    HelloWorld.class</span><br></pre></td></tr></table></figure></p><p>可以看到HelloWorld.class匹配到了我们的第一条*.class的忽略规则所以文件被忽略了。</p><blockquote><p>简单来说，要实现过滤掉Git里不想上传的文件，如上介绍三种方法能达到这种目的，只不过适用情景不一样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">============第一种方法===========</span><br><span class="line">针对单一工程排除文件，这种方式会让这个工程的所有修改者在克隆代码的同时，也能克隆到过滤规则，而不用自己再写一份，</span><br><span class="line">这就能保证所有修改者应用的都是同一份规则，而不是张三自己有一套过滤规则，李四又使用另一套过滤规则，个人比较喜欢这个。</span><br><span class="line"> </span><br><span class="line">配置步骤如下：</span><br><span class="line">在工程根目录下建立.gitignore文件，将要排除的文件或目录 写到.gitignore这个文件中，其中有两种写入方法：</span><br><span class="line"> </span><br><span class="line">a)使用命令行增加排除文件</span><br><span class="line">排除以.class结尾的文件 <span class="built_in">echo</span> <span class="string">"*.class"</span> &gt;.gitignore (&gt;&gt; 是在文件尾增加,&gt; 是删除已经存在的内容再增加)，之后会在当前目录下</span><br><span class="line">生成一个.gitignore的文件。排除bin目录下的文件 <span class="built_in">echo</span> <span class="string">"bin/"</span> &gt;.gitignore</span><br><span class="line"> </span><br><span class="line">b)最方便的办法是，用记事本打开，增加需要排除的文件或目录，一行增加一个，例如：</span><br><span class="line">*.class</span><br><span class="line">*.apk</span><br><span class="line">bin/</span><br><span class="line">gen/</span><br><span class="line">.settings/</span><br><span class="line">proguard/</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">===========第二种方法===========</span><br><span class="line">全局设置排除文件，这会在全局起作用，只要是Git管理的工程，在提交时都会自动排除不在控制范围内的文件或目录。这种方法对开发者来说，</span><br><span class="line">比较省事，只要一次全局配置，不用每次建立工程都要配置一遍过滤规则。但是这不保证其他的开发者在克隆你的代码后，他们那边的规则跟你</span><br><span class="line">的是一样的，这就带来了代码提交过程中的各种冲突问题。</span><br><span class="line">配置步骤如下：</span><br><span class="line">a）像方法（1）一样，也需要建立一个.gitignore文件，把要排除的文件写进去。</span><br><span class="line">b）但在这里，我们不规定一定要把.gitnore文件放到某个工程下面，而是任何地方，比如我们这里放到了Git默认的Home路径下，比如：/home/wangshibo/hqsb_ios</span><br><span class="line">c）使用命令方式可以配置全局排除文件:</span><br><span class="line">   <span class="comment"># git config --global core.excludesfile ~/.gitignore</span></span><br><span class="line">   你会发现在~/.gitconfig文件中会出现excludesfile = /home/wangshibo/hqsb_ios/.gitignore。</span><br><span class="line">   说明Git把文件过滤规则应用到了Global的规则中。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">===========第三种方法===========</span><br><span class="line">单个工程设置排除文件，在工程目录下找到.git/info/exclude，把要排除的文件写进去：</span><br><span class="line">*.class</span><br><span class="line">*.apk</span><br><span class="line">bin/</span><br><span class="line">gen/</span><br><span class="line">.settings/</span><br><span class="line">proguard/</span><br><span class="line"> </span><br><span class="line">这种方法就不提倡了，只能针对单一工程配置，而且还不能将过滤规则同步到其他开发者，跟方法一和方法二比较起来没有一点优势。</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Git忽略规则-gitignore配置）不生效原因和解决"><a href="#Git忽略规则-gitignore配置）不生效原因和解决" class="headerlink" title="Git忽略规则(.gitignore配置）不生效原因和解决"></a>Git忽略规则(.gitignore配置）不生效原因和解决</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">第一种方法:</span><br><span class="line">.gitignore中已经标明忽略的文件目录下的文件，git push的时候还会出现在push的目录中，或者用git status查看状态，想要忽略的文件还是显示被追踪状态。</span><br><span class="line">原因是因为在git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的，</span><br><span class="line">这时候我们就应该先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了。</span><br><span class="line">  </span><br><span class="line">解决方法: git清除本地缓存（改变成未track状态），然后再提交:</span><br><span class="line">[root@kevin ~]<span class="comment"># git rm -r --cached .</span></span><br><span class="line">[root@kevin ~]<span class="comment"># git add .</span></span><br><span class="line">[root@kevin ~]<span class="comment"># git commit -m 'update .gitignore'</span></span><br><span class="line">[root@kevin ~]<span class="comment"># git push -u origin master</span></span><br><span class="line"> </span><br><span class="line">需要特别注意的是：</span><br><span class="line">1）.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</span><br><span class="line">2）想要.gitignore起作用，必须要在这些文件不在暂存区中才可以，.gitignore文件只是忽略没有被staged(cached)文件，</span><br><span class="line">   对于已经被staged文件，加入ignore文件时一定要先从staged移除，才可以忽略。</span><br><span class="line"> </span><br><span class="line">第二种方法:（推荐）</span><br><span class="line">在每个<span class="built_in">clone</span>下来的仓库中手动设置不要检查特定文件的更改情况。</span><br><span class="line">[root@kevin ~]<span class="comment"># git update-index --assume-unchanged PATH                  //在PATH处输入要忽略的文件</span></span><br></pre></td></tr></table></figure><h3 id="在使用-gitignore文件后如何删除远程仓库中以前上传的此类文件而保留本地文件"><a href="#在使用-gitignore文件后如何删除远程仓库中以前上传的此类文件而保留本地文件" class="headerlink" title="在使用.gitignore文件后如何删除远程仓库中以前上传的此类文件而保留本地文件"></a>在使用.gitignore文件后如何删除远程仓库中以前上传的此类文件而保留本地文件</h3><p>在使用git和github的时候，之前没有写.gitignore文件，就上传了一些没有必要的文件，在添加了.gitignore文件后，就想删除远程仓库中的文件却想保存本地的文件。这时候不可以直接使用”git rm directory”，这样会删除本地仓库的文件。可以使用”git rm -r –cached directory”来删除缓冲，然后进行”commit”和”push”，这样会发现远程仓库中的不必要文件就被删除了，以后可以直接使用”git add -A”来添加修改的内容，上传的文件就会受到.gitignore文件的内容约束。</p><blockquote><p>额外说明：git库所在的文件夹中的文件大致有4种状态</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Untracked:</span><br><span class="line">未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</span><br><span class="line"> </span><br><span class="line">Unmodify:</span><br><span class="line">文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改,</span><br><span class="line">而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</span><br><span class="line"> </span><br><span class="line">Modified:</span><br><span class="line">文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态,</span><br><span class="line">使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改</span><br><span class="line"> </span><br><span class="line">Staged:</span><br><span class="line">暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态.</span><br><span class="line">执行git reset HEAD filename取消暂存, 文件状态为Modified</span><br><span class="line"> </span><br><span class="line">Git 状态 untracked 和 not staged的区别</span><br><span class="line">- [x] 1）untrack     表示是新文件，没有被add过，是为跟踪的意思。</span><br><span class="line">- [ ] 2）not staged  表示add过的文件，即跟踪文件，再次修改没有add，就是没有暂存的意思</span><br></pre></td></tr></table></figure><blockquote><p>文献参考来源：<a href="https://www.cnblogs.com/kevingrace/p/5690241.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/5690241.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gitignore </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>值得收藏的网站</title>
      <link href="/%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F%E7%9A%84%E7%BD%91%E7%AB%99/"/>
      <url>/%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F%E7%9A%84%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<center> Porter Pan </center><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文主要是收集比较好用的网站。</p><blockquote><p>包括学术，电影，音乐，下载资源，和用的网站</p></blockquote><a id="more"></a><center><br><img src="https://i.loli.net/2018/12/09/5c0cd76364ef9.png" alt="站点连接二维码"><br></center><p>1、 <a href="http://search.chongbuluo.com/" target="_blank" rel="noopener">虫部落搜索</a></p><p><a href="https://imgchr.com/i/FG9dPO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/FG9dPO.md.png" alt="FG9dPO.md.png"></a></p><hr><p>2、 <a href="http://scholar.chongbuluo.com/" target="_blank" rel="noopener">虫部落学术</a></p><p><img src="https://s1.ax1x.com/2018/12/09/FG9tVx.png" alt="FG9tVx.png"></p><hr><p>3、 <a href="http://image.chongbuluo.com/" target="_blank" rel="noopener">虫部落设计搜索</a></p><p><img src="https://s1.ax1x.com/2018/12/09/FG9QGF.png" alt="FG9QGF.png"></p><hr><p>4、 <a href="http://www.latexstudio.net/" target="_blank" rel="noopener">latexstudio排版学习</a></p><hr><p>5、 短网链生成</p><ul><li><a href="http://dwz.wailian.work/" target="_blank" rel="noopener">wailian</a></li></ul><p><img src="https://s1.ax1x.com/2018/12/09/FGPgC8.png" alt="FGPgC8.png"></p><ul><li><a href="http://suo.im/" target="_blank" rel="noopener">suo</a></li></ul><p><img src="https://s1.ax1x.com/2018/12/09/FGPRgg.png" alt="FGPRgg.png"></p><hr><p>6、 <a href="http://tool.hezibuluo.com/?&amp;rand=af1eb07e2eb8d08b029d8e2d2a809a75" target="_blank" rel="noopener">盒子部落便民工具系列</a></p><p><img src="https://s1.ax1x.com/2018/12/09/FGP5bn.png" alt="FGP5bn.png"></p><hr><p>7、 艺术字+ 二维码设计</p><blockquote><p><a href="http://www.akuziti.com/yw/" target="_blank" rel="noopener">艺术字设计</a></p></blockquote><blockquote><p><a href="http://www.xmesm.cn/" target="_blank" rel="noopener">个性二维码</a></p></blockquote><p>最终效果：</p><p><img src="https://s1.ax1x.com/2018/12/09/FGFYlD.png" alt="FGFYlD.png"></p><hr><p>8、 图床</p><blockquote><p><a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a></p></blockquote><blockquote><p><a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS图床</a>，生成后每次i.loli.net后缀的名字，更多可以参见<a href="https://www.jianshu.com/p/718173c339ee" target="_blank" rel="noopener">百度搜索</a>。 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 安利 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>STM32串口通信配置（USART1+USART2+USART3+UART4）</title>
      <link href="/STM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/"/>
      <url>/STM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h1><p>本文是通过分享几个通用的串口函数，实现对STM32芯片的多个串口操作和多种收发数据方式，实现串口通信的功能，本文的各个驱动代码经测试都可以直接使用，本人写的这部分代码开源 (。<em>^_^</em>。)</p><a id="more"></a><h2 id="一、串口一的配置"><a href="#一、串口一的配置" class="headerlink" title="一、串口一的配置"></a>一、串口一的配置</h2><ul><li>（初始化+中断配置+中断接收函数）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*===============================================================================</span></span><br><span class="line"><span class="comment">Copyright:</span></span><br><span class="line"><span class="comment">Version:</span></span><br><span class="line"><span class="comment">Author:    </span></span><br><span class="line"><span class="comment">Date: 2017/11/3</span></span><br><span class="line"><span class="comment">Description:</span></span><br><span class="line"><span class="comment">    配置独立看门狗初始化函数，在主函数中运行IWDG_ReloadCounter进行喂狗主函数必须在4s内进行一次喂狗不然系统会复位；</span></span><br><span class="line"><span class="comment">    函数功能是将接收固定长度的字符串，并将接收后的字符串通过串口发送出去</span></span><br><span class="line"><span class="comment">revise Description:</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_usart.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_iwdg.h"</span></span></span><br><span class="line"></span><br><span class="line">u8 USART1_RX_BUF[<span class="number">21</span>]; </span><br><span class="line">u8 USART1_RX_CNT=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IWDG_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Usart1_Init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//GPIO端口设置</span></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    USART_InitTypeDef USART_InitStructure;</span><br><span class="line">    NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">     </span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOC, ENABLE);<span class="comment">//使能USART1,GPIOA,C时钟</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//USART1_TX   GPIOA.9</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//PA.9</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;    <span class="comment">//复用推挽输出</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIOA.9</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//USART1_RX      GPIOA.10初始化</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;<span class="comment">//PA10</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;<span class="comment">//浮空输入</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIOA.10  </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Usart1 NVIC 配置</span></span><br><span class="line">    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);    <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级   0-3;</span></span><br><span class="line">    </span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">3</span> ;<span class="comment">//抢占优先级3</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>;        <span class="comment">//子优先级3</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            <span class="comment">//IRQ通道使能</span></span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure);    <span class="comment">//根据指定的参数初始化VIC寄存器</span></span><br><span class="line">  </span><br><span class="line">   <span class="comment">//USART 初始化设置</span></span><br><span class="line"></span><br><span class="line">    USART_InitStructure.USART_BaudRate = bound;<span class="comment">//串口波特率</span></span><br><span class="line">    USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//字长为8位数据格式</span></span><br><span class="line">    USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//一个停止位</span></span><br><span class="line">    USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶校验位</span></span><br><span class="line">    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;    <span class="comment">//收发模式</span></span><br><span class="line"></span><br><span class="line">    USART_Init(USART1, &amp;USART_InitStructure); <span class="comment">//初始化串口1</span></span><br><span class="line">    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);<span class="comment">//开启串口接受中断</span></span><br><span class="line">    USART_Cmd(USART1, ENABLE);                    <span class="comment">//使能串口1 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* USART1发送len个字节.</span></span><br><span class="line"><span class="comment">* buf:发送区首地址</span></span><br><span class="line"><span class="comment">* len:发送的字节数(为了和本代码的接收匹配,这里建议不要超过64个字节)</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_Send_Data</span><span class="params">(u8 *buf,u16 len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u16 t;</span><br><span class="line">    GPIO_SetBits(GPIOC,GPIO_Pin_9);</span><br><span class="line"><span class="comment">//  RS485_TX_EN=1;            //设置为发送模式</span></span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)        <span class="comment">//循环发送数据</span></span><br><span class="line">    &#123;           </span><br><span class="line">        <span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TC)==RESET); <span class="comment">//循环发送,直到发送完毕   </span></span><br><span class="line">        USART_SendData(USART1,buf[t]); </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);        </span><br><span class="line">    GPIO_ResetBits(GPIOC,GPIO_Pin_9);</span><br><span class="line"><span class="comment">//    RS485_TX_EN=0;                //设置为接收模式    </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Usart1_Init(<span class="number">9600</span>);<span class="comment">//串口1波特率设置为9600</span></span><br><span class="line">    IWDG_Configuration();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        IWDG_ReloadCounter();<span class="comment">//4s内必须喂狗不然复位</span></span><br><span class="line">        <span class="keyword">if</span>(USART1_RX_CNT==<span class="number">21</span>)<span class="comment">//数据接收完成</span></span><br><span class="line">        &#123;</span><br><span class="line">            USART1_RX_CNT=<span class="number">0</span>;<span class="comment">//指针复位</span></span><br><span class="line">            <span class="comment">//将接收到的数据发送出去</span></span><br><span class="line">            USART1_Send_Data(USART1_RX_BUF,<span class="number">21</span>);<span class="comment">//通过串口1将接收到的固定长度字符发送出去            </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 接收指定长度的字符串</span></span><br><span class="line"><span class="comment">* 比如接收固定大小为21个字节的字符串</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>                    <span class="comment">//串口1中断服务程序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u8 Res;</span><br><span class="line">    <span class="keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) </span><br><span class="line">        &#123;</span><br><span class="line">            Res =USART_ReceiveData(USART1);    <span class="comment">//读取接收到的数据     </span></span><br><span class="line">            <span class="keyword">if</span>(USART1_RX_CNT&lt;<span class="number">21</span>)<span class="comment">//对于接收指定长度的字符串</span></span><br><span class="line">            &#123;</span><br><span class="line">                USART1_RX_BUF[USART1_RX_CNT]=Res;        <span class="comment">//记录接收到的值    </span></span><br><span class="line">                USART1_RX_CNT++;                                        <span class="comment">//接收数据增加1 </span></span><br><span class="line">            &#125;             </span><br><span class="line">     &#125;</span><br><span class="line">         <span class="comment">//溢出-如果发生溢出需要先读SR,再读DR寄存器则可清除不断入中断的问题</span></span><br><span class="line">    <span class="keyword">if</span>(USART_GetFlagStatus(USART1,USART_FLAG_ORE) == SET)</span><br><span class="line">    &#123;</span><br><span class="line">        USART_ReceiveData(USART1);</span><br><span class="line">        USART_ClearFlag(USART1,USART_FLAG_ORE);</span><br><span class="line">    &#125;</span><br><span class="line">     USART_ClearFlag(UART1,USART_IT_RXNE); <span class="comment">//一定要清除接收中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*===============================================================================</span></span><br><span class="line"><span class="comment">Copyright:</span></span><br><span class="line"><span class="comment">Version:</span></span><br><span class="line"><span class="comment">Author:    </span></span><br><span class="line"><span class="comment">Date: 2017/11/3</span></span><br><span class="line"><span class="comment">Description:配置独立看门狗初始化函数，在主函数中运行IWDG_ReloadCounter进行喂狗</span></span><br><span class="line"><span class="comment">    主函数必须在4s内进行一次喂狗不然系统会复位</span></span><br><span class="line"><span class="comment">revise Description:</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IWDG_Configuration</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">/* 写入0x5555,用于允许狗狗寄存器写入功能 */</span></span><br><span class="line">    IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable); </span><br><span class="line">     <span class="comment">/* 狗狗时钟分频,40K/256=156HZ(6.4ms)*/</span>  </span><br><span class="line">    IWDG_SetPrescaler(IWDG_Prescaler_256);    <span class="comment">/* 喂狗时间 5s/6.4MS=781 .注意不能大于0xfff*/</span>  </span><br><span class="line">    IWDG_SetReload(<span class="number">781</span>);<span class="comment">//781（5s时间）</span></span><br><span class="line">    IWDG_SetReload(<span class="number">3125</span>);<span class="comment">//781（20s时间）</span></span><br><span class="line">    IWDG_Enable();<span class="comment">//启用定时器</span></span><br><span class="line">    IWDG_ReloadCounter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、串口二的配置"><a href="#二、串口二的配置" class="headerlink" title="二、串口二的配置"></a>二、串口二的配置</h2><ul><li>（初始化+中断配置+中断接收函数）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*===============================================================================</span></span><br><span class="line"><span class="comment">Copyright:</span></span><br><span class="line"><span class="comment">Version:</span></span><br><span class="line"><span class="comment">Author:    </span></span><br><span class="line"><span class="comment">Date: 2017/11/3</span></span><br><span class="line"><span class="comment">Description:</span></span><br><span class="line"><span class="comment">    函数功能是将接收固定长度的字符串，并将接收后的字符串通过串口发送出去</span></span><br><span class="line"><span class="comment">revise Description:</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_usart.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_iwdg.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u8 USART2_RX_BUF[<span class="number">250</span>]; </span><br><span class="line">u8 USART2_RX_CNT=<span class="number">0</span>;</span><br><span class="line">u16 USART2_RX_STA=<span class="number">0</span>;       <span class="comment">//接收状态标记    </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Usart2_Init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    USART_InitTypeDef USART_InitStructure;</span><br><span class="line">    NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">    <span class="comment">//|RCC_APB2Periph_AFIO</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<span class="comment">//使能GPIOA时钟</span></span><br><span class="line">    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);<span class="comment">//使能USART2时钟</span></span><br><span class="line"></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;    <span class="comment">//PA2</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;    <span class="comment">//复用推挽</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;<span class="comment">//PA3</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; <span class="comment">//浮空输入</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);  </span><br><span class="line"></span><br><span class="line">    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2,ENABLE);<span class="comment">//复位串口2</span></span><br><span class="line">    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2,DISABLE);<span class="comment">//停止复位</span></span><br><span class="line"></span><br><span class="line">    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);    <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级   0-3;</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn; <span class="comment">//使能串口2中断</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">3</span>; <span class="comment">//先占优先级2级</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>; <span class="comment">//从优先级2级</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//使能外部中断通道</span></span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure); <span class="comment">//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器</span></span><br><span class="line"></span><br><span class="line">    USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率设置</span></span><br><span class="line">    USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//8位数据长度</span></span><br><span class="line">    USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//一个停止位</span></span><br><span class="line">    USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">///奇偶校验位</span></span><br><span class="line">    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line"></span><br><span class="line">    USART_Init(USART2, &amp;USART_InitStructure); ; <span class="comment">//初始化串口</span></span><br><span class="line">    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);<span class="comment">//开启中断</span></span><br><span class="line">    USART_Cmd(USART2, ENABLE);                    <span class="comment">//使能串口 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* USART2发送len个字节.</span></span><br><span class="line"><span class="comment">* buf:发送区首地址</span></span><br><span class="line"><span class="comment">* len:发送的字节数(为了和本代码的接收匹配,这里建议不要超过64个字节)</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART2_Send_Data</span><span class="params">(u8 *buf,u16 len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u16 t;</span><br><span class="line">      <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)        <span class="comment">//循环发送数据</span></span><br><span class="line">    &#123;           </span><br><span class="line">        <span class="keyword">while</span>(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);      </span><br><span class="line">        USART_SendData(USART2,buf[t]);</span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">while</span>(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);          </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 这也是一个接收函数，可以用，也可以用下面main函数的方法调用</span></span><br><span class="line"><span class="comment">* USART2查询接收到的数据</span></span><br><span class="line"><span class="comment">* buf:接收缓存首地址</span></span><br><span class="line"><span class="comment">* len:读到的数据长度</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART2_Receive_Data</span><span class="params">(u8 *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u8 rxlen=USART2_RX_CNT;</span><br><span class="line">    u8 i=<span class="number">0</span>;</span><br><span class="line">    delay_ms(<span class="number">10</span>);        <span class="comment">//等待10ms,连续超过10ms没有接收到一个数据,则认为接收结束</span></span><br><span class="line">    <span class="keyword">while</span>(rxlen!=USART2_RX_CNT)</span><br><span class="line">    &#123;</span><br><span class="line">        rxlen=USART2_RX_CNT;</span><br><span class="line">        delay_ms(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(USART2_RX_CNT);i++)</span><br><span class="line">        &#123;</span><br><span class="line">            buf[i] = USART2_RX_BUF[i];    </span><br><span class="line">            USART2_RX_BUF[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;        </span><br><span class="line">        USART2_RX_CNT=<span class="number">0</span>;        <span class="comment">//清零</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Usart2_Init(<span class="number">9600</span>);<span class="comment">//串口1波特率设置为9600</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(USART2_RX_STA)<span class="comment">//数据接收完成</span></span><br><span class="line">        &#123;</span><br><span class="line">            USART2_RX_STA=<span class="number">0</span>;            </span><br><span class="line">            <span class="comment">//将接收到的数据发送出去</span></span><br><span class="line">            USART2_Send_Data(USART2_RX_BUF,USART2_RX_CNT);<span class="comment">//通过串口1将接收到的固定长度字符发送出去    </span></span><br><span class="line">            USART2_RX_CNT=<span class="number">0</span>;<span class="comment">//指针复位</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART2_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u8 res;        </span><br><span class="line">     <span class="keyword">if</span>(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) <span class="comment">//接收到数据</span></span><br><span class="line">    &#123;          </span><br><span class="line">        res =USART_ReceiveData(USART2);     <span class="comment">//读取接收到的数据        </span></span><br><span class="line">        <span class="keyword">if</span>(USART2_RX_STA==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            USART2_RX_BUF[USART2_RX_CNT] = res;        <span class="comment">//记录接收到的值    </span></span><br><span class="line">            <span class="comment">//当数据结尾收到0xA0和0xA1代表数据接收完成，是一串完整的数据</span></span><br><span class="line">            <span class="keyword">if</span>(USART2_RX_BUF[USART2_RX_CNT<span class="number">-1</span>]==<span class="number">0xA0</span>&amp;&amp;USART2_RX_BUF[USART2_RX_CNT]==<span class="number">0xA1</span>)</span><br><span class="line">                USART2_RX_STA=<span class="number">1</span>;<span class="comment">//表示接收数据结束</span></span><br><span class="line">            USART2_RX_CNT++;                        <span class="comment">//接收数据增加1 </span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//溢出-如果发生溢出需要先读SR,再读DR寄存器则可清除不断入中断的问题</span></span><br><span class="line">    <span class="keyword">if</span>(USART_GetFlagStatus(USART2,USART_FLAG_ORE) == SET)</span><br><span class="line">    &#123;</span><br><span class="line">        USART_ReceiveData(USART2);</span><br><span class="line">        USART_ClearFlag(USART2,USART_FLAG_ORE);</span><br><span class="line">    &#125;</span><br><span class="line">     USART_ClearFlag(UART2,USART_IT_RXNE); <span class="comment">//一定要清除接收中断    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、串口三的配置"><a href="#三、串口三的配置" class="headerlink" title="三、串口三的配置"></a>三、串口三的配置</h2><ul><li>（初始化+中断配置+中断接收函数）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*===============================================================================</span></span><br><span class="line"><span class="comment">Copyright:</span></span><br><span class="line"><span class="comment">Version:</span></span><br><span class="line"><span class="comment">Author:    </span></span><br><span class="line"><span class="comment">Date: 2017/11/3</span></span><br><span class="line"><span class="comment">Description:</span></span><br><span class="line"><span class="comment">    函数功能是将接收固定长度的字符串，并将接收后的字符串通过串口发送出去</span></span><br><span class="line"><span class="comment">    通过滴答定时器方式获取数据</span></span><br><span class="line"><span class="comment">revise Description:</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_usart.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USART3_TIMEOUT_Setting 800  <span class="comment">//(ms)</span></span></span><br><span class="line"></span><br><span class="line">u8 USART3_RX_BUF[<span class="number">250</span>]; </span><br><span class="line">u16 USART3_RX_CNT=<span class="number">0</span>;</span><br><span class="line">u16 USART3_RX_TIMEOUT=<span class="number">0</span>;       <span class="comment">//接收状态标记    </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Timer1CountInitial</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART3_Init</span><span class="params">(u32 baud)</span>   </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    USART_InitTypeDef USART_InitStructure;  </span><br><span class="line">    NVIC_InitTypeDef NVIC_InitStructure;   </span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;    <span class="comment">//声明一个结构体变量，用来初始化GPIO  </span></span><br><span class="line">    <span class="comment">//使能串口的RCC时钟  </span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB , ENABLE); <span class="comment">//使能UART3所在GPIOB的时钟  </span></span><br><span class="line">    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//串口使用的GPIO口配置  </span></span><br><span class="line">    <span class="comment">// Configure USART3 Rx (PB.11) as input floating    </span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;  </span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  </span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configure USART3 Tx (PB.10) as alternate function push-pull  </span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;  </span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  </span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  </span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置串口  </span></span><br><span class="line">    USART_InitStructure.USART_BaudRate = baud;  </span><br><span class="line">    USART_InitStructure.USART_WordLength = USART_WordLength_8b;  </span><br><span class="line">    USART_InitStructure.USART_StopBits = USART_StopBits_1;  </span><br><span class="line">    USART_InitStructure.USART_Parity = USART_Parity_No;  </span><br><span class="line">    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  </span><br><span class="line">    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configure USART3   </span></span><br><span class="line">    USART_Init(USART3, &amp;USART_InitStructure);<span class="comment">//配置串口3 </span></span><br><span class="line">    <span class="comment">// Enable USART3 Receive interrupts 使能串口接收中断  </span></span><br><span class="line">    USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);  </span><br><span class="line">    <span class="comment">// Enable the USART3   </span></span><br><span class="line">    USART_Cmd(USART3, ENABLE);<span class="comment">//使能串口3  </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//串口中断配置  </span></span><br><span class="line">    <span class="comment">//Configure the NVIC Preemption Priority Bits     </span></span><br><span class="line">    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enable the USART3 Interrupt   </span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;   </span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">3</span> ;<span class="comment">//抢占优先级3</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">2</span>;        <span class="comment">//子优先级3</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  </span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure);       </span><br><span class="line">      </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART3_Sned_Char</span><span class="params">(u8 temp)</span>        </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    USART_SendData(USART3,(u8)temp);      </span><br><span class="line">    <span class="keyword">while</span>(USART_GetFlagStatus(USART3,USART_FLAG_TXE)==RESET);  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART3_Sned_Char_Buff</span><span class="params">(u8 buf[],u32 len)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    u32 i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)  </span><br><span class="line">    USART3_Sned_Char(buf[i]);  </span><br><span class="line">          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Timer1CountInitial();</span><br><span class="line">    Usart3_Init(<span class="number">9600</span>);<span class="comment">//串口1波特率设置为9600</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(USART3_RX_TIMEOUT==USART3_TIMEOUT_Setting)</span><br><span class="line">        &#123;            </span><br><span class="line">            USART3_RX_TIMEOUT=<span class="number">0</span>;</span><br><span class="line">            USART3_Sned_Char_Buff(USART3_RX_BUF,USART3_RX_CNT);<span class="comment">//将接收到的数据发送出去</span></span><br><span class="line">            USART3_RX_CNT=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART3_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>                    <span class="comment">//串口3中断服务程序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u8 Res;</span><br><span class="line">    <span class="keyword">if</span>(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)  </span><br><span class="line">    &#123;    </span><br><span class="line">        USART3_RX_TIMEOUT=<span class="number">0</span>;</span><br><span class="line">        USART3_RX_BUF[USART3_RX_CNT++] = USART_ReceiveData(USART3);    <span class="comment">//读取接收到的数据        </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//溢出-如果发生溢出需要先读SR,再读DR寄存器则可清除不断入中断的问题</span></span><br><span class="line">    <span class="keyword">if</span>(USART_GetFlagStatus(USART3,USART_FLAG_ORE) == SET)</span><br><span class="line">    &#123;</span><br><span class="line">        USART_ReceiveData(USART3);</span><br><span class="line">        USART_ClearFlag(USART3,USART_FLAG_ORE);</span><br><span class="line">    &#125;</span><br><span class="line">    USART_ClearITPendingBit(USART3, USART_IT_RXNE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//放到主函数的初始化中初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Timer1CountInitial</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定时=36000/72000x2=0.001s=1ms;</span></span><br><span class="line">        TIM_TimeBaseInitTypeDef    TIM_TimeBaseStructure;</span><br><span class="line">        <span class="comment">///////////////////////////////////////////////////////////////</span></span><br><span class="line">        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);</span><br><span class="line">        </span><br><span class="line">        TIM_TimeBaseStructure.TIM_Period = <span class="number">100</span><span class="number">-1</span>;<span class="comment">//自动重装值（此时改为10ms）</span></span><br><span class="line">        TIM_TimeBaseStructure.TIM_Prescaler = <span class="number">7200</span><span class="number">-1</span>;<span class="comment">//时钟预分频</span></span><br><span class="line">        TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//向上计数</span></span><br><span class="line">        TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;        <span class="comment">//时钟分频1</span></span><br><span class="line">        TIM_TimeBaseStructure.TIM_RepetitionCounter = <span class="number">0</span>;            </span><br><span class="line">        TIM_TimeBaseInit(TIM1,&amp;TIM_TimeBaseStructure);</span><br><span class="line">        </span><br><span class="line">        TIM_ClearFlag(TIM1,TIM_FLAG_Update);</span><br><span class="line">        TIM_ITConfig(TIM1,TIM_IT_Update,ENABLE);  </span><br><span class="line">        TIM_Cmd(TIM1, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM1_UP_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;        </span><br><span class="line">    <span class="comment">//TIM_TimeBaseStructure.TIM_Period = 100-1;//自动重装值（此时改为10ms）</span></span><br><span class="line">    <span class="keyword">if</span> (TIM_GetITStatus(TIM1, TIM_IT_Update) != RESET)</span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(USART3_RX_TIMEOUT&lt;USART3_TIMEOUT_Setting)</span><br><span class="line">                USART3_RX_TIMEOUT++;        </span><br><span class="line">    &#125;</span><br><span class="line">    TIM_ClearITPendingBit(TIM1,TIM_IT_Update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、串口四的配置"><a href="#四、串口四的配置" class="headerlink" title="四、串口四的配置"></a>四、串口四的配置</h2><ul><li>（初始化+中断配置+中断接收函数）</li></ul><blockquote><p> 注意串口四的中断优先级没有贴出来，和前面的三个一样的配置，为了不占用过多的篇幅就不贴中断优先级配置了</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*===============================================================================</span></span><br><span class="line"><span class="comment">Copyright:</span></span><br><span class="line"><span class="comment">Version:</span></span><br><span class="line"><span class="comment">Author:    </span></span><br><span class="line"><span class="comment">Date: 2017/11/3</span></span><br><span class="line"><span class="comment">Description:</span></span><br><span class="line"><span class="comment">    函数功能是将接收固定长度的字符串，并将接收后的字符串通过串口发送出去</span></span><br><span class="line"><span class="comment">    通过滴答定时器方式获取数据</span></span><br><span class="line"><span class="comment">revise Description:</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_usart.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USART4_TIMEOUT_Setting 800  <span class="comment">//(ms)</span></span></span><br><span class="line"></span><br><span class="line">u8 USART4_RX_BUF[<span class="number">250</span>]; </span><br><span class="line">u16 USART4_RX_CNT=<span class="number">0</span>;</span><br><span class="line">u16 USART2_RX_STA=<span class="number">0</span>;       <span class="comment">//接收状态标记</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Systick_delay_init</span><span class="params">(u8 SYSCLK)</span></span>;</span><br><span class="line"><span class="function">u8 <span class="title">virtual_delay</span><span class="params">(u32 num,u8 unit)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用异步收发器UART4</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART4_Init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    USART_InitTypeDef USART_InitStructure;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//used for USART3 full remap</span></span><br><span class="line">    <span class="comment">//GPIO_PinRemapConfig(GPIO_FullRemap_USART3, ENABLE);</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">    RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);<span class="comment">//for UART4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Configure RS485_TX_EN PIN</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = RS485_TX_EN_PIN;                 <span class="comment">//PC9端口配置</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;          <span class="comment">//推挽输出</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(RS485_TX_EN_PORT, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">    RS485_TX_EN=<span class="number">0</span>;            <span class="comment">//设置485默认为接收模式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Configure USART Tx as alternate function push-pull */</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Configure USART Rx as input floating */</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_11;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    USART_InitStructure.USART_BaudRate = bound;</span><br><span class="line">    USART_InitStructure.USART_WordLength = USART_WordLength_8b;</span><br><span class="line">    USART_InitStructure.USART_StopBits = USART_StopBits_1;</span><br><span class="line">    USART_InitStructure.USART_Parity = USART_Parity_No ;</span><br><span class="line">    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;</span><br><span class="line">    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;</span><br><span class="line"></span><br><span class="line">    USART_Init(UART4, &amp;USART_InitStructure);</span><br><span class="line">    <span class="comment">//USART_Init(USART3, &amp;USART_InitStructure);</span></span><br><span class="line">    <span class="comment">/* Enable the USART */</span></span><br><span class="line">    USART_Cmd(UART4, ENABLE);</span><br><span class="line">    USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);<span class="comment">//开启串口接受中断</span></span><br><span class="line">    USART_ClearFlag(UART4,USART_FLAG_TC);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//USART1查询接收到的数据</span></span><br><span class="line"><span class="comment">//buf:接收缓存首地址</span></span><br><span class="line"><span class="comment">//len:读到的数据长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART4_Receive_Data</span><span class="params">(u8 *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u8 rxlen=<span class="number">21</span>;</span><br><span class="line">    u8 i=<span class="number">0</span>;</span><br><span class="line">    delay_ms(<span class="number">10</span>);        <span class="comment">//等待10ms,连续超过10ms没有接收到一个数据,则认为接收结束</span></span><br><span class="line">    </span><br><span class="line">    RS485_RX_FLAG = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>((UART4_RX_BUF[<span class="number">0</span>]==<span class="number">0x01</span>)&amp;&amp;(UART4_RX_BUF[<span class="number">1</span>]==<span class="number">0x03</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;rxlen;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            buf[i]=UART4_RX_BUF[i];    </span><br><span class="line">            UART4_RX_BUF[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        RS485_RX_FLAG = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        UART4_RX_CNT=<span class="number">0</span>;        <span class="comment">//清零</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//USART1发送len个字节.</span></span><br><span class="line"><span class="comment">//buf:发送区首地址</span></span><br><span class="line"><span class="comment">//len:发送的字节数(为了和本代码的接收匹配,这里建议不要超过64个字节)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART4_Send_Data</span><span class="params">(u8 *buf,u16 len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u16 t;</span><br><span class="line">    RS485_TX_EN=<span class="number">1</span>;            <span class="comment">//设置为发送模式</span></span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)        <span class="comment">//循环发送数据</span></span><br><span class="line">    &#123;           </span><br><span class="line">        <span class="keyword">while</span>(USART_GetFlagStatus(UART4,USART_FLAG_TC)==RESET); <span class="comment">//循环发送,直到发送完毕   </span></span><br><span class="line">        USART_SendData(UART4,buf[t]); </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">while</span>(USART_GetFlagStatus(UART4, USART_FLAG_TC) == RESET);        </span><br><span class="line">    RS485_TX_EN=<span class="number">0</span>;                <span class="comment">//设置为接收模式    </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Systick_delay_init(<span class="number">72</span>);</span><br><span class="line">    Usart4_Init(<span class="number">9600</span>);<span class="comment">//串口1波特率设置为9600</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(USART2_RX_STA)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(virtual_delay(USART4_TIMEOUT_Setting,MS))<span class="comment">//超过800ms空闲则可以读取数据</span></span><br><span class="line">            &#123;</span><br><span class="line">                UART4_Send_Data(UART4_RX_BUF,UART4_RX_CNT);</span><br><span class="line">                USART2_RX_STA=<span class="number">0</span>;</span><br><span class="line">                UART4_RX_CNT=<span class="number">0</span>;                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART4_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>                    <span class="comment">//UART4 Receive Interrupt </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u8 Res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(USART_GetITStatus(UART4, USART_IT_RXNE) != RESET)  <span class="comment">//接收中断(接收到的数据必须是0x0d 0x0a结尾)</span></span><br><span class="line">    &#123;    </span><br><span class="line">        Res =USART_ReceiveData(UART4);<span class="comment">//(USART1-&gt;DR);    //读取接收到的数据    </span></span><br><span class="line">        UART4_RX_BUF[UART4_RX_CNT&amp;<span class="number">0XFF</span>]=Res;        <span class="comment">//回传的数据存入数组,0X3F限制为64个数值</span></span><br><span class="line">            UART4_RX_CNT++;</span><br><span class="line">        USART2_RX_STA=<span class="number">1</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( USART_GetITStatus(UART4, USART_IT_TC) == SET )</span><br><span class="line">    &#123;</span><br><span class="line">        USART_ClearFlag(UART4, USART_FLAG_TC);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//溢出-如果发生溢出需要先读SR,再读DR寄存器则可清除不断入中断的问题</span></span><br><span class="line">    <span class="keyword">if</span>(USART_GetFlagStatus(UART4,USART_FLAG_ORE) == SET)</span><br><span class="line">    &#123;</span><br><span class="line">        USART_ReceiveData(UART4);</span><br><span class="line">        USART_ClearFlag(UART4,USART_FLAG_ORE);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    USART_ITConfig(UART4, USART_IT_RXNE, DISABLE);//临时关闭接收中断</span></span><br><span class="line">    USART_ClearFlag(UART4,USART_IT_RXNE); <span class="comment">//一定要清除接收中断</span></span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化延迟函数</span></span><br><span class="line"><span class="comment">//SYSTICK的时钟固定为HCLK时钟的1/8</span></span><br><span class="line"><span class="comment">//SYSCLK:系统时钟</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Systick_delay_init</span><span class="params">(u8 SYSCLK)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SysTick-&gt;CTRL&amp;=<span class="number">0xfffffffb</span>;<span class="comment">//bit2清空,选择外部时钟  HCLK/8</span></span><br><span class="line"><span class="comment">//    SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);    //选择外部时钟  HCLK/8</span></span><br><span class="line">    fac_us=SYSCLK/<span class="number">8</span>;            </span><br><span class="line">    fac_ms=(u16)fac_us*<span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*===============================================================================</span></span><br><span class="line"><span class="comment">Author:peter pan</span></span><br><span class="line"><span class="comment">Date: </span></span><br><span class="line"><span class="comment">Description: 查询式分时或叫做轮询式（近似延时）。本函数是用于执行高效率场合的查询延时，但是一个for or while 循环中只能用一次。</span></span><br><span class="line"><span class="comment">revise Description:  </span></span><br><span class="line"><span class="comment">@ num :    //分时查询的周期计数值    </span></span><br><span class="line"><span class="comment">@ unit :    //分时查询的周期单位 </span></span><br><span class="line"><span class="comment">    @@ParaValue ： </span></span><br><span class="line"><span class="comment">        MS    //周期单位为MS毫秒级</span></span><br><span class="line"><span class="comment">        US    //周期单位为US微秒级</span></span><br><span class="line"><span class="comment">@ virtual_delay_status :    //静态变量</span></span><br><span class="line"><span class="comment">    @@ParaValue ： </span></span><br><span class="line"><span class="comment">        SET    //SYSTICK正在占用中，请勿用</span></span><br><span class="line"><span class="comment">        RESET  //SYSTICK空闲，可以使用</span></span><br><span class="line"><span class="comment">@ReValue :</span></span><br><span class="line"><span class="comment">    with zero mean Time non-arrive ,one representative Time arrived ,you can do task;</span></span><br><span class="line"><span class="comment">##example             if(virtual_delay(1000,MS)) LedFlash();    //1000ms LED闪烁一下</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="function">u8 <span class="title">virtual_delay</span><span class="params">(u32 num,u8 unit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u32 temp;           </span><br><span class="line">    <span class="keyword">if</span>(virtual_delay_status==RESET)    <span class="comment">//  SYSTICK空闲，可以使用</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span>(unit==MS)</span><br><span class="line">          &#123;</span><br><span class="line">                SysTick-&gt;LOAD=(u32)num*Delay_SYSCLK*<span class="number">125</span>;<span class="comment">//时间加载(SysTick-&gt;LOAD为24bit)</span></span><br><span class="line">                SysTick-&gt;VAL =<span class="number">0x00</span>;           <span class="comment">//清空计数器</span></span><br><span class="line">                SysTick-&gt;CTRL=<span class="number">0x01</span> ;          <span class="comment">//开始倒数  </span></span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(unit==US) </span><br><span class="line">          &#123;</span><br><span class="line">                SysTick-&gt;LOAD=num*Delay_SYSCLK/<span class="number">8</span>; <span class="comment">//时间加载               </span></span><br><span class="line">                SysTick-&gt;VAL=<span class="number">0x00</span>;        <span class="comment">//清空计数器</span></span><br><span class="line">                SysTick-&gt;CTRL=<span class="number">0x01</span> ;      <span class="comment">//开始倒数     </span></span><br><span class="line">          &#125;</span><br><span class="line">          virtual_delay_status=SET;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        &#123;        <span class="comment">//virtual_delay_status==SET SYSTICK被占用</span></span><br><span class="line">        </span><br><span class="line">            temp=SysTick-&gt;CTRL;</span><br><span class="line">            <span class="keyword">if</span>(!(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>))))<span class="comment">//等待时间到达   </span></span><br><span class="line">            &#123;</span><br><span class="line">                SysTick-&gt;CTRL=<span class="number">0x00</span>;       <span class="comment">//关闭计数器</span></span><br><span class="line">                SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器    </span></span><br><span class="line">                virtual_delay_status=RESET;    </span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上<a href="本文地址：https://www.cnblogs.com/pertor/p/9488446.html">本人这篇博客地址</a></p>]]></content>
      
      
      <categories>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>STM32复位及通过函数判断是何种条件出发的复位</title>
      <link href="/STM32%E5%A4%8D%E4%BD%8D%E5%8F%8A%E9%80%9A%E8%BF%87%E5%87%BD%E6%95%B0%E5%88%A4%E6%96%AD%E6%98%AF%E4%BD%95%E7%A7%8D%E6%9D%A1%E4%BB%B6%E5%87%BA%E5%8F%91%E7%9A%84%E5%A4%8D%E4%BD%8D/"/>
      <url>/STM32%E5%A4%8D%E4%BD%8D%E5%8F%8A%E9%80%9A%E8%BF%87%E5%87%BD%E6%95%B0%E5%88%A4%E6%96%AD%E6%98%AF%E4%BD%95%E7%A7%8D%E6%9D%A1%E4%BB%B6%E5%87%BA%E5%8F%91%E7%9A%84%E5%A4%8D%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>STM32F10xxx支持三种复位形式，分别为系统复位、上电复位和备份区域复位。本文将通过实际的代码来解释各种情况下，软、硬件导致芯片复位的判别和怎样采取措施。</p><a id="more"></a><h2 id="一、系统复位"><a href="#一、系统复位" class="headerlink" title="一、系统复位"></a>一、系统复位</h2><h4 id="系统复位将复位所有寄存器至它们的复位状态。-当发生以下任一事件时，产生一个系统复位："><a href="#系统复位将复位所有寄存器至它们的复位状态。-当发生以下任一事件时，产生一个系统复位：" class="headerlink" title="系统复位将复位所有寄存器至它们的复位状态。 当发生以下任一事件时，产生一个系统复位："></a>系统复位将复位所有寄存器至它们的复位状态。 当发生以下任一事件时，产生一个系统复位：</h4><ul><li><ol><li>NRST引脚上的低电平(外部复位) 2. 窗口看门狗计数终止(WWDG复位)</li></ol></li><li><ol start="3"><li>独立看门狗计数终止(IWDG复位)</li></ol></li><li><ol start="4"><li>软件复位(SW复位)</li></ol></li><li><ol start="5"><li>低功耗管理复位 可通过查看RCC_CSR控制状态寄存器中的复位状态标志位识别复位事件来源。<br>软件复位通过将Cortex™-M3中断应用和复位控制寄存器中的SYSRESETREQ位置’1’，可实现软件复位。请参考Cortex™-M3技术参考手册获得进一步信息。</li></ol></li></ul><h3 id="1-1-低功耗管理复位在以下两种情况下可产生低功耗管理复位："><a href="#1-1-低功耗管理复位在以下两种情况下可产生低功耗管理复位：" class="headerlink" title="1.1 低功耗管理复位在以下两种情况下可产生低功耗管理复位："></a>1.1 低功耗管理复位在以下两种情况下可产生低功耗管理复位：</h3><ul><li><ol><li>在进入待机模式时产生低功耗管理复位： 通过将用户选择字节中的nRST_STDBY位置’1’将使能该复位。这时，即使执行了进入待机模式的过程，系统将被复位而不是进入待机模式。</li></ol></li><li><ol start="2"><li>在进入停止模式时产生低功耗管理复位： 通过将用户选择字节中的nRST_STOP位置’1’将使能该复位。这时，即使执行了进入停机模式的过程，系统将被复位而不是进入停机模式。<br>关于用户选择字节的进一步信息，请参考STM32F10xxx闪存编程手册。</li></ol></li></ul><h2 id="电源复位"><a href="#电源复位" class="headerlink" title="电源复位"></a>电源复位</h2><h4 id="电源复位当以下事件中之一发生时，产生电源复位："><a href="#电源复位当以下事件中之一发生时，产生电源复位：" class="headerlink" title="电源复位当以下事件中之一发生时，产生电源复位："></a>电源复位当以下事件中之一发生时，产生电源复位：</h4><ul><li><ol><li>上电/掉电复位(POR/PDR复位)</li></ol></li><li><ol start="2"><li>从待机模式中返回 图4) 电源复位将复位除了备份区域外的所有寄存器。<br>(见图中复位源将最终作用于RESET引脚，并在复位过程中保持低电平。复位入口矢量被固定在地址0x0000_0004。</li></ol></li></ul><p>芯片内部的复位信号会在NRST引脚上输出，脉冲发生器保证每一个(外部或内部)复位源都能有至少20μs的脉冲延时；当NRST引脚被拉低产生外部复位时，它将产生复位脉冲。</p><p><img src="https://s1.ax1x.com/2018/11/11/iqofJS.png" alt="iqofJS.png"></p><h2 id="三、备份域复位"><a href="#三、备份域复位" class="headerlink" title="三、备份域复位"></a>三、备份域复位</h2><blockquote><p>备份区域拥有两个专门的复位，它们只影响备份区域(见图4)。 当以下事件中之一发生时，产生备份区域复位。</p></blockquote><ul><li><ol><li>软件复位，备份区域复位可由设置备份域控制寄存器 (RCC_BDCR)(见6.3.9节)中的BDRST位产生。</li></ol></li><li><ol start="2"><li>在VDD和VBAT两者掉电的前提下，VDD或VBAT上电将引发备份区域复位。</li></ol></li></ul><h2 id="四、复位的标志位"><a href="#四、复位的标志位" class="headerlink" title="四、复位的标志位"></a>四、复位的标志位</h2><p><a href="https://imgchr.com/i/iqohRg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/11/iqohRg.md.png" alt="iqohRg.md.png"></a></p><h2 id="五、复位标志位检索-判断什么原因导致的复位"><a href="#五、复位标志位检索-判断什么原因导致的复位" class="headerlink" title="五、复位标志位检索/判断什么原因导致的复位"></a>五、复位标志位检索/判断什么原因导致的复位</h2><p>标志位判断的代码由官方库中给定代码如下：</p><blockquote><p>FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)；//FlagStatus 分为SET和RESET两种；</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Checks whether the specified RCC flag is set or not.</span></span><br><span class="line"><span class="comment">  * @param  RCC_FLAG: specifies the flag to check.</span></span><br><span class="line"><span class="comment">  *   </span></span><br><span class="line"><span class="comment">  *   For @b STM32_Connectivity_line_devices, this parameter can be one of the</span></span><br><span class="line"><span class="comment">  *   following values:</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_PLLRDY: PLL clock ready</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      </span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           </span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_PINRST: Pin reset</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_PORRST: POR/PDR reset</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_SFTRST: Software reset</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_LPWRRST: Low Power reset</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  *   For @b other_STM32_devices, this parameter can be one of the following values:        </span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_PLLRDY: PLL clock ready</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_PINRST: Pin reset</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_PORRST: POR/PDR reset</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_SFTRST: Software reset</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset</span></span><br><span class="line"><span class="comment">  *     @arg RCC_FLAG_LPWRRST: Low Power reset</span></span><br><span class="line"><span class="comment">  *   </span></span><br><span class="line"><span class="comment">  * @retval The new state of RCC_FLAG (SET or RESET).</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">FlagStatus <span class="title">RCC_GetFlagStatus</span><span class="params">(<span class="keyword">uint8_t</span> RCC_FLAG)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> tmp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">uint32_t</span> statusreg = <span class="number">0</span>;</span><br><span class="line">  FlagStatus bitstatus = RESET;</span><br><span class="line">  <span class="comment">/* Check the parameters */</span></span><br><span class="line">  assert_param(IS_RCC_FLAG(RCC_FLAG));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Get the RCC register index */</span></span><br><span class="line">  tmp = RCC_FLAG &gt;&gt; <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">if</span> (tmp == <span class="number">1</span>)               <span class="comment">/* The flag to check is in CR register */</span></span><br><span class="line">  &#123;</span><br><span class="line">    statusreg = RCC-&gt;CR;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (tmp == <span class="number">2</span>)          <span class="comment">/* The flag to check is in BDCR register */</span></span><br><span class="line">  &#123;</span><br><span class="line">    statusreg = RCC-&gt;BDCR;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>                       <span class="comment">/* The flag to check is in CSR register */</span></span><br><span class="line">  &#123;</span><br><span class="line">    statusreg = RCC-&gt;CSR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Get the flag position */</span></span><br><span class="line">  tmp = RCC_FLAG &amp; FLAG_Mask;</span><br><span class="line">  <span class="keyword">if</span> ((statusreg &amp; ((<span class="keyword">uint32_t</span>)<span class="number">1</span> &lt;&lt; tmp)) != (<span class="keyword">uint32_t</span>)RESET)</span><br><span class="line">  &#123;</span><br><span class="line">    bitstatus = SET;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    bitstatus = RESET;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Return the flag status */</span></span><br><span class="line">  <span class="keyword">return</span> bitstatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然判断完后，我们需要将复位类型的标志置位以防后期出现重复多次判断</p><blockquote><p>void RCC_ClearFlag(void)；//清除复位执行函数</p></blockquote><p>代码原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Clears the RCC reset flags.</span></span><br><span class="line"><span class="comment">  * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,</span></span><br><span class="line"><span class="comment">  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST</span></span><br><span class="line"><span class="comment">  * @param  None</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RCC_ClearFlag</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* Set RMVF bit to clear the reset flags */</span></span><br><span class="line">  RCC-&gt;CSR |= CSR_RMVF_Set;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">* 在使用时，只需要执行如下语句即可：</span><br><span class="line"></span><br><span class="line">```C</span><br><span class="line"><span class="keyword">if</span>(RCC_GetFlagStatus(RCC_FLAG_PORRST) != RESET)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">//这是上电复位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (RCC_GetFlagStatus(RCC_FLAG_PINRST) != RESET)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">//这是外部RST管脚复位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (RCC_GetFlagStatus(RCC_FLAG_SFTRST)!= RESET)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">//这是外部RST管脚复位</span></span><br><span class="line">        &#125;        </span><br><span class="line">        RCC_ClearFlag();<span class="comment">//清除RCC中复位标志</span></span><br></pre></td></tr></table></figure><h2 id="六、STM32软件复位方法"><a href="#六、STM32软件复位方法" class="headerlink" title="六、STM32软件复位方法"></a>六、STM32软件复位方法</h2><p>在Cortex-M3权威指南中有这么一句话这里有一个要注意的问题：从SYSRESETREQ 被置为有效，到复位发生器执行复位命令，往往会有一个延时。在此延时期间，处理器仍然可以响应中断请求。但我们的本意往往是要让此次执行到此为止，不要再做任何其它事情了。所以，最好在发出复位请求前，先把FAULTMASK 置位。所以最好在将FAULTMASK 置位才万无一失。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mcuRestart</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">　　__set_FAULTMASK(<span class="number">1</span>); <span class="comment">//关闭所有中断</span></span><br><span class="line">　　NVIC_SystemReset(); <span class="comment">//复位</span></span><br><span class="line">｝</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python之tkinter入坑Pack</title>
      <link href="/python%E4%B9%8Btkinter%E5%85%A5%E5%9D%91Pack/"/>
      <url>/python%E4%B9%8Btkinter%E5%85%A5%E5%9D%91Pack/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>python 中写GUI界面还是有很多方法的，下面我就说说这个tkinter吧，感觉刚上手不久，感觉不好用的样子，可能是我自己的原因导致的用不顺手。这篇主要写tkinter的pack（）方法。</p><a id="more"></a><h3 id="tkinter-的pack-可以设置的属性"><a href="#tkinter-的pack-可以设置的属性" class="headerlink" title="tkinter 的pack()可以设置的属性"></a>tkinter 的pack()可以设置的属性</h3><ul><li>我从官网帮助手册中看到的是这样</li></ul><blockquote><p>pack_configure(self, cnf={}, **kw)Pack a widget in the parent widget. Use as options:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">after=widget - pack it after you have packed widget</span><br><span class="line">anchor=NSEW (<span class="keyword">or</span> subset) - position widget according to</span><br><span class="line">                          given direction</span><br><span class="line">before=widget - pack it before you will pack widget</span><br><span class="line">expand=bool - expand widget <span class="keyword">if</span> parent size grows</span><br><span class="line">fill=NONE <span class="keyword">or</span> X <span class="keyword">or</span> Y <span class="keyword">or</span> BOTH - fill widget <span class="keyword">if</span> widget grows</span><br><span class="line"><span class="keyword">in</span>=master - use master to contain this widget</span><br><span class="line">in_=master - see <span class="string">'in'</span> option description</span><br><span class="line">ipadx=amount - add internal padding <span class="keyword">in</span> x direction</span><br><span class="line">ipady=amount - add internal padding <span class="keyword">in</span> y direction</span><br><span class="line">padx=amount - add padding <span class="keyword">in</span> x direction</span><br><span class="line">pady=amount - add padding <span class="keyword">in</span> y direction</span><br><span class="line">side=TOP <span class="keyword">or</span> BOTTOM <span class="keyword">or</span> LEFT <span class="keyword">or</span> RIGHT -  where to add this widget.</span><br></pre></td></tr></table></figure><ul><li>上面的部分中文意思是说</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">anchor=NSEW,表示设置我们要加的当前部件的位置</span><br><span class="line">side=TOP <span class="keyword">or</span> BOTTOM <span class="keyword">or</span> LEFT <span class="keyword">or</span> RIGHT  表示在父类容器的什么地方家我们的部件</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/11/11/iqo2If.png" alt="iqo2If.png"></p><ul><li>上面的界面代码如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="comment"># 导入TK的符号常亮</span></span><br><span class="line"><span class="keyword">from</span> tkinter.constants <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendStr</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Data Send Ok!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  实例化TK类，主窗口必须为.TK(),而其他子窗口为.Toplevel()</span></span><br><span class="line">top = tkinter.Tk()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置窗口的尺寸大小</span></span><br><span class="line">top.wm_geometry(<span class="string">'320x480+1000+100'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不允许 改变 窗口的宽和高</span></span><br><span class="line">top.wm_resizable(<span class="keyword">False</span>,<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置窗口标题</span></span><br><span class="line">top.title(<span class="string">'TCP Server'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置label标签</span></span><br><span class="line">L1 = tkinter.Label(top, text=<span class="string">'TCP Sever;\n20108/09/15'</span>,</span><br><span class="line">                   width=<span class="number">15</span>, justify=LEFT, relief=RIDGE, background=<span class="string">'#6699ff'</span>, )\</span><br><span class="line">    .pack_configure(anchor=S, side=TOP, ipady=<span class="number">2</span>, pady=<span class="number">2</span>, fill=NONE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置容器</span></span><br><span class="line">frame1 = tkinter.Frame(top,height=<span class="number">80</span>,width=<span class="number">60</span>,relief=RIDGE, bg=<span class="string">'#ff3399'</span>,bd=<span class="number">5</span>,borderwidth=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 设置填充和布局</span></span><br><span class="line">frame1.pack(fill=NONE,ipady=<span class="number">2</span>,expand=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加接收区文字标签</span></span><br><span class="line">L2 = tkinter.Label(frame1,text=<span class="string">'接\n收\n区'</span>,width=<span class="number">2</span>, justify=LEFT, font=(<span class="string">"宋体"</span>, <span class="number">12</span>, <span class="string">"bold"</span>),)\</span><br><span class="line">    .pack(padx=<span class="number">2</span>,pady=<span class="number">40</span>,side=LEFT,anchor=N)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加接收区的文本框</span></span><br><span class="line">txt1 = tkinter.Text(frame1,width = <span class="number">40</span>, height = <span class="number">10</span>).pack(padx=<span class="number">2</span>,pady=<span class="number">10</span>,side=RIGHT,anchor=N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">frame2 = tkinter.Frame(top, relief=RIDGE,bg=<span class="string">'#3366ff'</span>)</span><br><span class="line">frame2.pack(fill=X, padx=<span class="number">2</span>,pady=<span class="number">10</span>,side=TOP)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加一个复选框，一个按键</span></span><br><span class="line">chk_text = <span class="string">'Hex Display'</span></span><br><span class="line">int_if_choise = tkinter.IntVar()</span><br><span class="line">chk1 = tkinter.Checkbutton(frame2,text=chk_text,font=(<span class="string">'黑体'</span>,<span class="number">12</span>),variable=int_if_choise,onvalue=<span class="string">'OK'</span>,offvalue=<span class="string">'NO'</span>)</span><br><span class="line">chk1.pack(fill=NONE,side=LEFT,padx=<span class="number">2</span>,pady=<span class="number">10</span>)</span><br><span class="line">print(<span class="string">'shuchu:'</span>,int_if_choise)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置容器</span></span><br><span class="line">frame3 = tkinter.Frame(top,height=<span class="number">120</span>,width=<span class="number">60</span>,relief=RIDGE, bg=<span class="string">'#ff3399'</span>,bd=<span class="number">5</span>,borderwidth=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 设置填充和布局</span></span><br><span class="line">frame3.pack(fill=X,ipady=<span class="number">2</span>,expand=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字符串变量</span></span><br><span class="line">ServerReceiveVar = tkinter.StringVar(top,<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">L3 = tkinter.Label(frame3, text=<span class="string">'Cache&amp;Input:'</span>,font=(<span class="string">'黑体'</span>,<span class="number">12</span>))</span><br><span class="line">L3.pack(fill=NONE, expand=NO, side=TOP, anchor=W, padx=<span class="number">2</span>,pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">txt2 = tkinter.Text(frame3, height = <span class="number">2</span>, width = <span class="number">30</span>).pack(padx=<span class="number">2</span>, pady=<span class="number">2</span>, ipady=<span class="number">4</span>, side=LEFT, anchor=N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">button1 = tkinter.Button(frame3,text=<span class="string">'Send Str'</span>, command=sendStr).pack(side=TOP, anchor=W, padx=<span class="number">2</span>, pady=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># IP 列表</span></span><br><span class="line">button2 = tkinter.Button(frame3,text=<span class="string">"Exit"</span>,command=top.destroy).pack(side=TOP, anchor=N, padx=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">top.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/11/11/iqoWi8.png" alt="iqoWi8.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line"></span><br><span class="line">w = Label(root, text=<span class="string">"red"</span>, bg=<span class="string">"red"</span>, fg=<span class="string">"white"</span>)</span><br><span class="line">w.pack(padx=<span class="number">5</span>, pady=<span class="number">10</span>, side=LEFT)</span><br><span class="line">w = Label(root, text=<span class="string">"green"</span>, bg=<span class="string">"green"</span>, fg=<span class="string">"black"</span>)</span><br><span class="line">w.pack(padx=<span class="number">5</span>, pady=<span class="number">20</span>, side=LEFT)</span><br><span class="line">w = Label(root, text=<span class="string">"blue"</span>, bg=<span class="string">"blue"</span>, fg=<span class="string">"white"</span>)</span><br><span class="line">w.pack(padx=<span class="number">5</span>, pady=<span class="number">20</span>, side=LEFT)</span><br><span class="line"></span><br><span class="line">mainloop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++ MFC 界面实现套接字（socket) 通信</title>
      <link href="/MFC-Socket-%E9%80%9A%E4%BF%A1/"/>
      <url>/MFC-Socket-%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><ul><li>Socket 套接字的概念</li><li>Socket 函数功能</li><li>MFC 介绍</li><li>TCP 变成步骤</li><li>TCP 上位机实现</li></ul><a id="more"></a><h2 id="Socket-套接字的概念"><a href="#Socket-套接字的概念" class="headerlink" title="Socket 套接字的概念"></a>Socket 套接字的概念</h2><p>引用<a href="https://baike.baidu.com/item/socket/281150?fr=aladdin" target="_blank" rel="noopener">百度百科的一句话</a>：网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。</p><ul><li>一段形象的比喻：</li></ul><blockquote><p>建立网络通信连接至少要一对端口号(socket)。socket本质是编程接口(API)，对TCP/IP的封装，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口；HTTP是轿车，提供了封装或者显示数据的具体形式；Socket是发动机，提供了网络通信的能力。</p></blockquote><hr><p>Socket的英文原义是“孔”或“插座”。在Internet上的主机一般运行了多个服务软件，同时提供几种服务。每种服务都打开一个Socket，并绑定到一个端口上，不同的端口对应于不同的服务。Socket正如其英文原义那样，像一个多孔插座。一台主机犹如布满各种插座的房间，每个插座有一个编号，有的插座提供220伏交流电， 有的提供110伏交流电，有的则提供有线电视节目。 客户软件将插头插到不同编号的插座，就可以得到不同的服务。</p><p><a href="http://www.supersocket.net/" target="_blank" rel="noopener">SuperSocke,可扩展的 Socket 服务器框架</a></p><p><a href="https://github.com/socketio/socket.io" target="_blank" rel="noopener">socket.io github 网页</a>或者<a href="http://socket.io" target="_blank" rel="noopener">官网</a></p><h2 id="Socket-函数功能"><a href="#Socket-函数功能" class="headerlink" title="Socket 函数功能"></a>Socket 函数功能</h2><p>具体函数如下：</p><ul><li><p>socket()函数</p></li><li><p>bind()函数</p></li><li><p>connect()函数</p></li><li><p>listen()函数</p></li><li><p>accept()函数</p></li><li><p>send()和recv()函数</p></li><li><p>sendto()和recvfrom()函数</p></li><li><p>close()和shutdown()函数</p></li><li><p>getpeername()函数</p></li><li><p>gethostname()函数</p></li></ul><hr><h3 id="socket-函数"><a href="#socket-函数" class="headerlink" title="socket() 函数"></a>socket() 函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domine,<span class="keyword">int</span> type,<span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>参数(int domin)：</li></ul><blockquote><p>函数参数，即协议域，又称为协议族。协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET(IPV4)、AF_INET6(IPV6)、AF_LOCAL（或称AF_UNIX，Unix域socket）、AF_ROUTE等等。通常情况下我们使用AF_INET。</p></blockquote><blockquote><p>AF_INET的定义是：#define AF_INET 2，所以这里的参数都是int型的</p></blockquote><ul><li>参数(int type)：</li></ul><blockquote><p>:是套接口类型，主要SOCK_STREAM(建立TCP连接)、SOCK_DGRAM（建立UDP）、SOCK_RAW；<br>SOCK_STREAM(建立TCP连接)：提供面向连接的可靠的数据传输服务。数据被看作是字节流，无长度限制。例如FTP协议就采用这种。<br>SOCK_DGRAM（建立UDP）：提供无连接的数据传输服务，不保证可靠性。</p></blockquote><blockquote><p>SOCK_RAW：该接口允许对较低层次协议，如IP，ICMP直接访问。</p></blockquote><ul><li>参数(int protocole)：</li></ul><blockquote><p>指定协议。常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议。通常情况系设为0。</p></blockquote><blockquote><p><strong>注意</strong>：并不是上面的type和protocol可以随意组合的，如SOCK_STREAM不可以跟IPPROTO_UDP组合。当protocol为0时，会自动选择type类型对应的默认协议。</p></blockquote><ul><li>函数返回值(int):</li></ul><blockquote><p>成功：返回套接字描述符（套接字的索引）</p></blockquote><blockquote><p>失败：返回-1</p></blockquote><h3 id="bind-函数"><a href="#bind-函数" class="headerlink" title="bind() 函数"></a>bind() 函数</h3><p>一旦你有一个套接字，你可能要将套接字和机器上的一定的端口关联 起来。(如果你想用listen()来侦听一定端口的数据，这是必要一步–MUD 告 诉你说用命令 “telnet x.y.z 6969”。)如果你只想用 connect()，那么这个步 骤没有必要。但是无论如何，请继续读下去。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *my_addr, <span class="keyword">int</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>参数(int sockfd)：</li></ul><blockquote><p>sockfd 是调用 socket 返回的文件描述符。</p></blockquote><ul><li>参数(struct sockaddr *my_addr)：</li></ul><blockquote><p>my_addr 是指向数据结构 struct sockaddr 的指针，它保存你的地址(即端口和 IP 地址) 信息。</p></blockquote><ul><li>参数(int addrlen)：</li></ul><blockquote><p>addrlen 设置为 sizeof(struct sockaddr)。</p></blockquote><h3 id="connect-函数"><a href="#connect-函数" class="headerlink" title="connect()函数"></a>connect()函数</h3><p>现在我们假设你是个 telnet 程序。你的用户命令你得到套接字的文件 描述符。你听从命令调用了socket()。下一步，你的用户告诉你通过端口 23(标准 telnet 端口)连接到”132.241.5.10”。你该怎么做呢? 幸运的是，你正在阅读 connect()–如何连接到远程主机这一章。你可 不想让你的用户失望。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *serv_addr, <span class="keyword">int</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>参数(int sockfd)：</li></ul><blockquote><p>sockfd 是系统调用 socket() 返回的套接字文件描述符。</p></blockquote><ul><li>参数(struct sockaddr *serv_addr)：</li></ul><blockquote><p>serv_addr 是 保存着目的地端口和 IP 地址的数据结构 struct sockaddr。</p></blockquote><ul><li>参数(int addrlen)：</li></ul><blockquote><p>addrlen 设置 为 sizeof(struct sockaddr)。</p></blockquote><h3 id="listen-函数"><a href="#listen-函数" class="headerlink" title="listen()函数"></a>listen()函数</h3><p>是换换内容得时候了。假如你不希望与远程的一个地址相连，或者说， 仅仅是将它踢开，那你就需要等待接入请求并且用各种方法处理它们。处 理过程分两步：首先，你听–listen()，然后，你接受–accept() (请看下面的 内容)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>参数(int sockfd)：</li></ul><blockquote><p>sockfd 是调用 socket() 返回的套接字文件描述符。</p></blockquote><ul><li>参数(int backlog)：</li></ul><p>backlog 是在进入 队列中允许的连接数目。</p><h3 id="accept-函数"><a href="#accept-函数" class="headerlink" title="accept()函数"></a>accept()函数</h3><h3 id="send-和recv-函数"><a href="#send-和recv-函数" class="headerlink" title="send()和recv()函数"></a>send()和recv()函数</h3><h3 id="sendto-和recvfrom-函数"><a href="#sendto-和recvfrom-函数" class="headerlink" title="sendto()和recvfrom()函数"></a>sendto()和recvfrom()函数</h3><h3 id="close-和shutdown-函数"><a href="#close-和shutdown-函数" class="headerlink" title="close()和shutdown()函数"></a>close()和shutdown()函数</h3><h3 id="getpeername-函数"><a href="#getpeername-函数" class="headerlink" title="getpeername()函数"></a>getpeername()函数</h3><h3 id="gethostname-函数"><a href="#gethostname-函数" class="headerlink" title="gethostname()函数"></a>gethostname()函数</h3><p>本节参考了<a href="https://www.cnblogs.com/kefeiGame/p/7246942.html" target="_blank" rel="noopener">博文</a></p><h2 id="MFC-介绍"><a href="#MFC-介绍" class="headerlink" title="MFC 介绍"></a>MFC 介绍</h2><h2 id="TCP-上位机实现"><a href="#TCP-上位机实现" class="headerlink" title="TCP 上位机实现"></a>TCP 上位机实现</h2>]]></content>
      
      
      <categories>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Socket </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vultr+freenom实现主机域名的绑定</title>
      <link href="/vultr-freenom%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E5%9F%9F%E5%90%8D%E7%9A%84%E7%BB%91%E5%AE%9A/"/>
      <url>/vultr-freenom%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E5%9F%9F%E5%90%8D%E7%9A%84%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="vultr-freenom实现主机域名的绑定"><a href="#vultr-freenom实现主机域名的绑定" class="headerlink" title=" vultr+freenom实现主机域名的绑定 "></a><center> vultr+freenom实现主机域名的绑定 <center></center></center></h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文将通过实例进行演示，给大家介绍如何用免费的域名，绑定我们的云主机，只需要登录Freenom注册个账号就可以免费申请免备案域名了，心动请先不要忙行动，点击阅读更多，先看看本文的免费域名申请绑定主机的方法吧。</p><a id="more"></a><h2 id="1、注册freenom域名"><a href="#1、注册freenom域名" class="headerlink" title="1、注册freenom域名"></a>1、注册freenom域名</h2><ul><li>进入 <strong><a href="https://my.freenom.com/clientarea.php" target="_blank" rel="noopener">freenom</a></strong> 网站,在界面的菜单中选择“Servers”–&gt;”Register a New Domains”，如下图所示:</li></ul><p><img src="https://s1.ax1x.com/2018/11/07/iTb50P.png" alt="进入My Domains菜单"></p><blockquote><p>可能在此之前需要先注册一个账号，具体网站的账号怎么注册，自己摸索下，并不复杂，这里我们只讲怎么注册域名并解析到你的主机。</p></blockquote><ul><li>接下来在“My Domains”页面上的输入框中输入你想注册的免费域名，并搜索下是否已经被注册了，输入框在如下图中的红框所示，例如我输入：smriti</li></ul><p><img src="https://s1.ax1x.com/2018/11/07/iTbITf.png" alt="红框中输入你想要的域名"></p><p>搜索结果显示，好几个是免费的，我们只需要选择一个就行，如下截图所示：</p><p><img src="https://s1.ax1x.com/2018/11/07/iTbHfg.png" alt="搜索到的理想域名"></p><ul><li>随便选择一个，“Get it now” 即可比如我选择TK域名，然后进入我的购物车，选择免费12个月，如下图：</li></ul><p><img src="https://s1.ax1x.com/2018/11/07/iTqpkT.png" alt="选择免费使用12个月"></p><ul><li>接下来在USE DNS处选择自己需要解析到的主机IP地址上，也就是把你的云服务器的主机地址填到下图的红框中，Hostname<br>不要动，保持默认（ 一个是yourdot.tk,另一个是<a href="http://www.yourdot.tk" target="_blank" rel="noopener">www.yourdot.tk</a> ），如下图：</li></ul><p><img src="https://s1.ax1x.com/2018/11/07/iTqZ0x.png" alt="指定解析到的IP地址"></p><ul><li>接下来点击“COntinue”即可。</li></ul><hr><p>注意如果你现在没有主机IP，你可以先不填，后期再填写，后期填写只需要进入“My Domains” 选择你注册的域名，点击右边的“Manage Domain”，然后选择第四个菜单，”Manage Freenom DNS”,然后添加域名解析到主机，如下图所示：</p><p><img src="https://s1.ax1x.com/2018/11/07/iTLmKs.png" alt="绑定到主机IP"></p><ul><li><p>接下来就是等待，因为域名解析，不会一下子就解析成功的所以你需要等5-30分钟不等，如果一个小时后还是解析不成功，可能就是你的主机IP填写错误</p></li><li><p>重要的事情再说一遍，就是以上域名解析填写完成后，还需要进行等待，一般5-30分钟。5分钟内访问该网站可能提示解析错误，所以要等待啊。</p></li><li><p>有的需要主机上面也要填写DNS绑定域名,比如阿里云主机,但是我这是国外的主机和国外的免费域名，好像不要要云主机上面操作，直接在域名服务商网页上绑定主机IP就成功访问了。 </p></li></ul><h2 id="2、主机注册"><a href="#2、主机注册" class="headerlink" title="2、主机注册"></a>2、主机注册</h2><blockquote><p>推荐好用的还便宜的云主机：<a href="vultr.com">vultr</a> 、 和 <a href="https://bwg.net/" target="_blank" rel="noopener">搬瓦工</a> </p></blockquote><ul><li>加入你已经购买了云虚拟主机，点击进入主机管理，如下图所示：</li></ul><p><img src="https://s1.ax1x.com/2018/11/07/iTLTzQ.png" alt="云主机设置"></p><ul><li>添加主机域名绑定</li></ul><p><img src="https://s1.ax1x.com/2018/11/07/iTLjoV.png" alt="主机中绑定域名"></p><ul><li>最后一步，主机中绑定域名，如下图：</li></ul><p><img src="https://s1.ax1x.com/2018/11/07/iTOKQH.png" alt="主机中绑定域名"></p>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-index/"/>
      <url>/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-index/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p> 基于这章节的想法和具体需要完成的任务如下：</p><ul><li>首先是基于深度学习的歌曲分类</li><li>基于深度学习的目标检测</li><li>基于深度学习的手写字计算速度改进</li><li>基于深度学习的人脸识别等例子实现<br>界面设计</li></ul><a id="more"></a><hr><h1 id="优秀学者-资源"><a href="#优秀学者-资源" class="headerlink" title="优秀学者/资源"></a>优秀学者/资源</h1><h2 id="学者、教授"><a href="#学者、教授" class="headerlink" title="学者、教授"></a>学者、教授</h2><ul><li><a href="https://www.uts.edu.au/staff/yida.xu" target="_blank" rel="noopener">徐志强副教授(Associate Professor Richard Xu)</a>,其 <strong><a href="https://github.com/roboticcam" target="_blank" rel="noopener">github主页</a></strong>  an AI Professor in Machine Learning at UTS.</li></ul>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 每次写好后deploy博客</title>
      <link href="/Hexo-%E6%AF%8F%E6%AC%A1%E5%86%99%E5%A5%BD%E5%90%8Edeploy%E5%8D%9A%E5%AE%A2/"/>
      <url>/Hexo-%E6%AF%8F%E6%AC%A1%E5%86%99%E5%A5%BD%E5%90%8Edeploy%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<center> Porter Pan </center><h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>github page 结合Hexo-Yelee或者Next主题,搭建个人博客主页，是很不错的一个选择，个人使用情况，感觉Yelee界面布局啥的还是很不错的。</p><p>这篇文章中我将介绍每次我们写好的md博文怎么部署到github page 上去。</p><hr><p>本文主要使用的命令行如下：</p><ul><li>1、直接部署到网站</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><a id="more"></a><p>也可以本地部署，查看浏览效果</p><ul><li>2、部署到本地，查看浏览效果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h2 id="我们每次写好的博文如何正确推送至github"><a href="#我们每次写好的博文如何正确推送至github" class="headerlink" title="我们每次写好的博文如何正确推送至github"></a>我们每次写好的博文如何正确推送至github</h2><p>每次我们写好了博文后，需要上传至我们的github空间中,只需要每次将我们写好的博文放到文件路径：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Github\smritipertor.github.io\source\_posts</span><br></pre></td></tr></table></figure></p><p>如果之前没有安装过<br><strong> hexo-deployer-git </strong><br>的话，先执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后执行如下命令操作：</p><ul><li>首先在你之前建好的博文路径：比如我的是</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line">hexo s //(或者:hexo server)</span><br><span class="line"></span><br><span class="line">hexo deploy //(或者:hexo d)</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>一般我们在站点根目录中的“_config.yml”中的文件中设定我们hexo d，的部署文件到那个ID和分支中，设置内容如下：</li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repository: https://github.com/smritipertor/smritipertor.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>以上内容表示，不管我们当前工作在那个分区，只要站点根目录中的“_config.yml”中branch 分区设置好，直接</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><blockquote><p>就可以发布了。</p></blockquote><p>如果你执行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate -d</span><br></pre></td></tr></table></figure></p><h2 id="常见错误及解决办法"><a href="#常见错误及解决办法" class="headerlink" title="常见错误及解决办法"></a>常见错误及解决办法</h2><h3 id="第一种，部署出错"><a href="#第一种，部署出错" class="headerlink" title="第一种，部署出错"></a>第一种，部署出错</h3><p>出现错误提示，如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: in unpopulated submodule '.deploy_git'                                                                           FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html                 Error: fatal: in unpopulated submodule '.deploy_git'                                                                                                                                                                                                at ChildProcess.&lt;anonymous&gt; (D:\GitWebsite\smritipertor.github.io\node_modules\hexo-util\lib\spawn.js:37:17)            at ChildProcess.emit (events.js:182:13)                                                                                 at ChildProcess.cp.emit (D:\GitWebsite\smritipertor.github.io\node_modules\cross-spawn\lib\enoent.js:40:29)             at maybeClose (internal/child_process.js:962:16)                                                                        at Process.ChildProcess._handle.onexit (internal/child_process.js:251:5)</span><br></pre></td></tr></table></figure></p><p>则你可以直接执行以下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .deploy_git</span><br><span class="line">hexo generate -d</span><br></pre></td></tr></table></figure><p>即，删除地电脑本地的.deploy_git文件夹（可能是你上个版本是另一台电脑），然后再生成、部署即可。</p><h3 id="至此你的网站上就有了网站数据"><a href="#至此你的网站上就有了网站数据" class="headerlink" title="至此你的网站上就有了网站数据"></a>至此你的网站上就有了网站数据</h3>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blogs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第一篇博文</title>
      <link href="/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"/>
      <url>/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/</url>
      
        <content type="html"><![CDATA[<center> Porter Pan </center><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>欢迎来到我的博文主页，你可以进一步了解我，通过<a href="www.porterpan.tk">聚水渊主页</a> <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> !和我的<a href="https://github.com/smri" target="_blank" rel="noopener">github</a></p><a id="more"></a><h3 id="写作目的"><a href="#写作目的" class="headerlink" title="写作目的"></a>写作目的</h3><ul><li>为了更好的学习</li><li>每天总结</li><li>看到自己每天的进步</li></ul><blockquote><p>遇见最优秀的自己，下面是我的其他博客地址</p></blockquote><p><a href="https://www.cnblogs.com/pertor/" target="_blank" rel="noopener">我的博客园</a></p><p><a href="https:---" target="_blank" rel="noopener">我的CSDN</a></p><p><a href="https://weibo.com/26mod=personinfo&amp;is_all=1" target="_blank" rel="noopener">新浪博客</a></p><p><a href="http://blog.163.tipertor/" target="_blank" rel="noopener">网易博客</a></p><h4 id="说说我之前的英文名和现在的英文名"><a href="#说说我之前的英文名和现在的英文名" class="headerlink" title="说说我之前的英文名和现在的英文名"></a>说说我之前的英文名和现在的英文名</h4><p>之前我的firstname 是pertor 现在是porter，不是一个人 ？<br>不，是一个人的，因为pertor是西班牙的名字，porter是英文名字。都是一个人。</p><hr><h5 id="我的网易云"><a href="#我的网易云" class="headerlink" title="我的网易云"></a>我的网易云</h5><p>最后我贴下<a href="...">我的网易笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu 中安装sublime_text3</title>
      <link href="/ubuntu-%E4%B8%AD%E5%AE%89%E8%A3%85sublime-text3/"/>
      <url>/ubuntu-%E4%B8%AD%E5%AE%89%E8%A3%85sublime-text3/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h1 id="Porter-Pan"><a href="#Porter-Pan" class="headerlink" title="Porter Pan"></a><center>Porter Pan</center></h1><h3 id="Enter-“Alt-m”-will-show-Markdown-Preview"><a href="#Enter-“Alt-m”-will-show-Markdown-Preview" class="headerlink" title="Enter “Alt+m” will show Markdown Preview"></a><center>Enter “Alt+m” will show Markdown Preview</center></h3><blockquote><ul><li>安装</li><li>输入注册码</li><li>汉化</li><li>安装插件</li><li>中文输入bug修复</li></ul></blockquote><a id="more"></a><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><p>&emsp;&emsp;建议和我一样初学的直接安装，不要直接下载官方的离线包解压了，不然还得自己配置什么dash中显示，什么的环境配置乱七八糟的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、 wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -</span><br><span class="line">2、 sudo apt-get install apt-transport-https</span><br><span class="line">3、 echo &quot;deb https://download.sublimetext.com/ apt/stable/&quot; | sudo tee /etc/apt/sources.list.d/sublime-text.list</span><br><span class="line">4、 sudo apt-get update</span><br><span class="line">5、 sudo apt-get install sublime-text</span><br></pre></td></tr></table></figure><h2 id="1-2-输入注册码"><a href="#1-2-输入注册码" class="headerlink" title="1.2 输入注册码"></a>1.2 输入注册码</h2><p>&emsp;&emsp;在输入注册码之前先更改hosts，ubuntu中hosts位于：  vim /etc/hosts或者gedit /etc/hosts<br>,然后加入如下两行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、 127.0.0.1       www.sublimetext.com</span><br><span class="line">2、 127.0.0.1       license.sublimehq.com</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后保存，此时dash中输入sublime，找到我们安装的软件，打开后在界面菜单中选择help–&gt;enter license，然后输入如下注册码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----- BEGIN LICENSE -----</span><br><span class="line">sgbteam</span><br><span class="line">Single User License</span><br><span class="line">EA7E-1153259</span><br><span class="line">8891CBB9 F1513E4F 1A3405C1 A865D53F</span><br><span class="line">115F202E 7B91AB2D 0D2A40ED 352B269B</span><br><span class="line">76E84F0B CD69BFC7 59F2DFEF E267328F</span><br><span class="line">215652A3 E88F9D8F 4C38E3BA 5B2DAAE4</span><br><span class="line">969624E7 DC9CD4D5 717FB40C 1B9738CF</span><br><span class="line">20B3C4F1 E917B5B3 87C38D9C ACCE7DD8</span><br><span class="line">5F7EF854 86B9743C FADC04AA FB0DA5C0</span><br><span class="line">F913BE58 42FEA319 F954EFDD AE881E0B</span><br><span class="line">------ END LICENSE ------</span><br></pre></td></tr></table></figure></p><p>点击确定，然后就可以 enjoy it!</p><p> 在这还没结束，下面开始<strong>汉化</strong></p><h1 id="1-3-汉化"><a href="#1-3-汉化" class="headerlink" title="1.3 汉化"></a>1.3 汉化</h1><p> &emsp;&emsp;打开软件，直接按下“shift+ctrl+p”在弹出的框内输入<strong>ip</strong>,然后点击”package control：install pakage”,出来后输入”Chinese​Localizations”来安装<strong>Chinese​Localizations</strong>插件，然后重启，至此汉化结束。</p><h1 id="1-4-安装markdown插件"><a href="#1-4-安装markdown插件" class="headerlink" title="1.4 安装markdown插件"></a>1.4 安装markdown插件</h1><p> &emsp;&emsp;在软件界面输入“shift+ctrl+p”,然后输入“ip”，然后选择，packageinstall ，然后输入“Markdown Editing“ + ”MarkdownLivePreview”,分别安装上，然后新建md文件，在编辑界面输入“alt+m”,则进入markdown preview实时显示模式。</p><h1 id="1-5-解决Markdown不能输入汉字的问题"><a href="#1-5-解决Markdown不能输入汉字的问题" class="headerlink" title="1.5 解决Markdown不能输入汉字的问题"></a>1.5 解决Markdown不能输入汉字的问题</h1><p>打开终端：</p><p>在终端中输入以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/lyfeyaj/sublime-text-imfix.git</span><br><span class="line">cd sublime-text-imfix &amp;&amp; ./sublime-imfix</span><br></pre></td></tr></table></figure></p><p>或者直接进入github的这个<a href="https://github.com/lyfeyaj/sublime-text-imfix.git" target="_blank" rel="noopener">仓库</a>：直接下载这个zip包，然后解压，然后在终端中cd到这个解压后的文件夹路径中，最后是在终端中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sublime-imfix</span><br></pre></td></tr></table></figure></p><p>此时重启sublimetext3 然后就可以进行汉字的输入了。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://blog.csdn.net/qq_41590417/article/details/80461075" target="_blank" rel="noopener">https://blog.csdn.net/qq_41590417/article/details/80461075</a></p><p><a href="https://blog.csdn.net/woaidouya123/article/details/81476551" target="_blank" rel="noopener">https://blog.csdn.net/woaidouya123/article/details/81476551</a></p><p><a href="https://www.cnblogs.com/james-lee/p/6847906.html" target="_blank" rel="noopener">https://www.cnblogs.com/james-lee/p/6847906.html</a></p>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> sublime-text </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<center> Porter Pan </center><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><hr><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决Chrome67版本以后不能离线安装插件的情况</title>
      <link href="/%E8%A7%A3%E5%86%B3Chrome67%E7%89%88%E6%9C%AC%E4%BB%A5%E5%90%8E%E4%B8%8D%E8%83%BD%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E7%9A%84%E6%83%85%E5%86%B5/"/>
      <url>/%E8%A7%A3%E5%86%B3Chrome67%E7%89%88%E6%9C%AC%E4%BB%A5%E5%90%8E%E4%B8%8D%E8%83%BD%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E7%9A%84%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<center> Porter Pan </center><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>通过本文安装方法可以快速，解决Chrome67版本以后不能离线安装插件的情况。</p><p><img src="https://i.loli.net/2018/10/22/5bcde5483136e.png" alt="离线插件安装失败"></p><a id="more"></a><blockquote><p>一般情况下，我们如果使用的Chrome版本为67以后的版本，安装离线插件会出现如下图信息</p></blockquote><p><img src="https://i.loli.net/2018/10/22/5bcde5483136e.png" alt="离线插件安装失败"></p><blockquote><p>但是这样我们就真的没法安装离线插件了吗？特别是对想安装翻墙的插件 <strong><em>Proxy SwitchyOmega</em></strong> 的同学来说是一件噩梦。这篇文章讲会告诉读者，这个问题是可以解决的</p></blockquote><h2 id="解决方法如下："><a href="#解决方法如下：" class="headerlink" title="解决方法如下："></a>解决方法如下：</h2><ul><li>首代开终端输入以下代码<blockquote><blockquote><p>/opt/google/chrome/google-chrome –enable-easy-off-store-extension-install</p></blockquote></blockquote></li></ul><blockquote><blockquote><p>将会打开google Chrome 浏览器，然后进入浏览器的扩展插件工具界面，如下图所示：</p></blockquote></blockquote><p><img src="https://i.loli.net/2018/10/22/5bcde7297750e.png" alt="扩展程序界面"></p><ul><li>此时请再次将离线下载的插件拖进去，看看是不是能够安装了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>index</title>
      <link href="/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-index/"/>
      <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-index/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>Welcome to <a href="http://index.porterpan.top/" target="_blank" rel="noopener">My site IODT</a>! This is your very first visit. Check <a href="https://porter.gitbook.io/deep-learning-series/" target="_blank" rel="noopener">home page of book</a> for more info. If you get any problems when reading, you can find the answer in <a href="https://www.google.com" target="_blank" rel="noopener">google</a> or you can ask me on <img src="/image1/twitter.ico" alt="Twitter">:<a href="https://twitter.com/zf_pertor?lang=en" target="_blank" rel="noopener">by @zf_pertor</a>.</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><hr><h1 id="一、-本章主要是Linux下学习环境的相关配置，-包括学习的开发工具，-也包括系统本埠支持的软件替换或者修复的解决方案。"><a href="#一、-本章主要是Linux下学习环境的相关配置，-包括学习的开发工具，-也包括系统本埠支持的软件替换或者修复的解决方案。" class="headerlink" title="一、 本章主要是Linux下学习环境的相关配置， 包括学习的开发工具， 也包括系统本埠支持的软件替换或者修复的解决方案。"></a>一、 本章主要是Linux下学习环境的相关配置， 包括学习的开发工具， 也包括系统本埠支持的软件替换或者修复的解决方案。</h1><p>本章组织应包括如下内容：</p><ul><li><a href="./Ubuntu18下有道词典的配置.md">Ubuntu18下有道词典的配置</a></li><li><a href="./Ubuntu18安装Gitbook.md">Ubuntu18 安装Gitbook</a></li></ul><hr><h1 id="二、-优秀工具，资源"><a href="#二、-优秀工具，资源" class="headerlink" title="二、 优秀工具，资源"></a>二、 优秀工具，资源</h1><h2 id="2-1-LaTex-在线帮助教程"><a href="#2-1-LaTex-在线帮助教程" class="headerlink" title="2.1 LaTex 在线帮助教程"></a>2.1 <a href="www.ctex.org/OnlineDocuments">LaTex 在线帮助教程</a></h2>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git 推送新的文章到github其他分支上</title>
      <link href="/git-%E6%8E%A8%E9%80%81%E6%96%B0%E7%9A%84%E6%96%87%E7%AB%A0%E5%88%B0github%E5%85%B6%E4%BB%96%E5%88%86%E6%94%AF%E4%B8%8A/"/>
      <url>/git-%E6%8E%A8%E9%80%81%E6%96%B0%E7%9A%84%E6%96%87%E7%AB%A0%E5%88%B0github%E5%85%B6%E4%BB%96%E5%88%86%E6%94%AF%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="Porter-Pan"><a href="#Porter-Pan" class="headerlink" title=" Porter Pan "></a><center> Porter Pan </center></h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>每次编辑博文并通过命令部署网站到github page上时，我们想每天都能将改动后的博文备份到github的一个分支上，实现本地数据同步到云仓库中。</p><ul><li>实现本地博客云同步到github page其他分支上</li><li>实现本地博客部署到github page上的master分支上</li></ul><p><img src="https://s1.ax1x.com/2018/11/10/iqZ6KJ.png" alt="我的博客网站"></p><a id="more"></a><h2 id="网站部署（建议隔段时间再部署到网站上，短时间内直接部署本地，本地浏览下就好"><a href="#网站部署（建议隔段时间再部署到网站上，短时间内直接部署本地，本地浏览下就好" class="headerlink" title="网站部署（建议隔段时间再部署到网站上，短时间内直接部署本地，本地浏览下就好"></a>网站部署（建议隔段时间再部署到网站上，短时间内直接部署本地，本地浏览下就好</h2><h3 id="部署到网上"><a href="#部署到网上" class="headerlink" title="部署到网上"></a>部署到网上</h3><ul><li>直接部署到github page的master上</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 git <span class="built_in">clone</span> -b proworking &lt;我的github网站仓库:proworking&gt;</span><br><span class="line">2 git pull origin proworking  <span class="comment">#从我的工作分支更新最新的博文和站点配置文件</span></span><br><span class="line">3 git checkout master  <span class="comment">#将我们的本地切换到master分支</span></span><br><span class="line">4 <span class="comment">#此处开始加入你的博文.md到站点的：\source\_posts文件夹中</span></span><br><span class="line">5 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h3 id="部署到本地"><a href="#部署到本地" class="headerlink" title="部署到本地"></a>部署到本地</h3><ul><li>本地部署，本地浏览效果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 git <span class="built_in">clone</span> -b proworking &lt;我的github网站仓库:proworking&gt;</span><br><span class="line">2 git checkout master  <span class="comment">#将我们的本地切换到master分支</span></span><br><span class="line">3 <span class="comment">#此处开始加入你的博文.md到站点的：\source\_posts文件夹中</span></span><br><span class="line">4 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><blockquote><p>实现从github上获取我仓库中的Proworking分支数据，病拉取到我的本地</p></blockquote><ul><li>将本地的博文再重新push到我的云仓库（proworking)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"添加了：file1.md\file2.md"</span></span><br><span class="line">git push origin HEAD:proworking <span class="comment">#一定要添加HEAD 不然会</span></span><br></pre></td></tr></table></figure><hr><h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><blockquote><p>下面贴上我遇到的问题</p></blockquote><ul><li>[1] 若果你直接输入命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push proworking</span><br></pre></td></tr></table></figure></li></ul><p>可能会出现如下的不正常信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Pertor@Pertor-PC MINGW64 /d/Github/smritipertor.github.io (master)</span><br><span class="line">$ git push proworking</span><br><span class="line"></span><br><span class="line">fatal: <span class="string">'proworking'</span> does not appear to be a git repository</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>正确的解决办法是，命令中输入如下代码（加HEAD)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pertor@Pertor-PC MINGW64 /d/Github/smritipertor.github.io (master)</span><br><span class="line">$ git push origin HEAD:proworking</span><br></pre></td></tr></table></figure><p>此时会输出正确的提示，具体提示信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Enumerating objects: 1498, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (1480/1480), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (1219/1219), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (1461/1461), 1.17 MiB | 390.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 1461 (delta 187), reused 1300 (delta 139)</span><br><span class="line">remote: Resolving deltas: 100% (187/187), completed with 10 <span class="built_in">local</span> objects.</span><br><span class="line">To https://github.com/smritipertor/smritipertor.github.io.git</span><br><span class="line">   06b21dd..1ff56b7  HEAD -&gt; proworking</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu18 正确 安装ShadowSocket</title>
      <link href="/ubuntu18-%E6%AD%A3%E7%A1%AE-%E5%AE%89%E8%A3%85ShadowSocket/"/>
      <url>/ubuntu18-%E6%AD%A3%E7%A1%AE-%E5%AE%89%E8%A3%85ShadowSocket/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu18-正确安装shadowsocket"><a href="#ubuntu18-正确安装shadowsocket" class="headerlink" title=" ubuntu18 正确安装shadowsocket "></a><center> ubuntu18 正确安装shadowsocket </center></h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>为达到能够自由访问全球学习资料，我可谓是绞尽脑汁莫寻方法，目前能做到的除了付费包月的vpn代理机构的，就只能是自己动手自己干的了，但是自己搞旺旺会出很多问题，本文结合晴子实践的经验，将所遇到的问题都一一列下并解决。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1541859694666&amp;di=4157a8d46151dfea7b45b6b0e6277d61&amp;imgtype=0&amp;src=http%3A%2F%2Fwenwen.soso.com%2Fp%2F20120619%2F20120619102239-1814974902.jpg" alt="Socket5"></p><a id="more"></a><h2 id="1、正常的安装步骤（ubuntu16版本）"><a href="#1、正常的安装步骤（ubuntu16版本）" class="headerlink" title="1、正常的安装步骤（ubuntu16版本）"></a>1、正常的安装步骤（ubuntu16版本）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* Ctrl+Alt+T打开终端，输入以下命令安装好GUI界面shadowsocks-qt5</span><br><span class="line">* sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line">* sudo apt-get update</span><br><span class="line">* sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure><ul><li>但是Ubuntu18.04在安装shadowsocks-qt5时就会出现错误</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">仓库 “http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu bionic Release” 没有 Release 文件</span><br></pre></td></tr></table></figure><h1 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h1><ul><li>ppa:hzwhuang/ss-qt5 并没有18.04版本的源</li></ul><h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><h3 id="第一步、修改sources-list-d下文件名"><a href="#第一步、修改sources-list-d下文件名" class="headerlink" title="第一步、修改sources.list.d下文件名"></a>第一步、修改sources.list.d下文件名</h3><p>修改/etc/apt/sources.list.d/hzwhuang-ubuntu-ss-qt5-bionic.list文件，将bionic（18.04版本代号）改成xenial（16.04版本代号）</p><h3 id="第二步、设置如下图"><a href="#第二步、设置如下图" class="headerlink" title="第二步、设置如下图"></a>第二步、设置如下图</h3><blockquote><blockquote><ul><li>bash 中打开<br><strong>软件更新器</strong> —&gt; <strong>设置</strong> —&gt; <strong>其他软件</strong> –&gt;</li></ul></blockquote></blockquote><blockquote><blockquote><ul><li>编辑：<a href="http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu" target="_blank" rel="noopener">http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu</a></li></ul></blockquote></blockquote><p><img src="https://i.loli.net/2018/10/22/5bcdcb28d4124.png" alt="编辑发行版"></p><p><strong> 将发行版改为xenial </strong>,如上图所示。</p><h2 id="然后再执行"><a href="#然后再执行" class="headerlink" title="然后再执行"></a>然后再执行</h2><ul><li>sudo apt-get update</li><li>sudo apt-get install shadowsocks-qt5 </li></ul>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Socket5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python Tkinter 界面实现套接字（socket) 通信</title>
      <link href="/Python-GUI-Socket/"/>
      <url>/Python-GUI-Socket/</url>
      
        <content type="html"><![CDATA[<center> Porter Pan </center><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GUI </tag>
            
            <tag> 日记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.8 深度学习环境搭建</title>
      <link href="/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-8-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-8-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了1.8 深度学习环境搭建，安装CUDA，安装NVIDIA驱动，pytorch，caffe框架等等。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="深度学习环境搭建"><a href="#深度学习环境搭建" class="headerlink" title="深度学习环境搭建"></a>深度学习环境搭建</h1><h2 id="一、安装CUDA运算平台-NVIDIA驱动"><a href="#一、安装CUDA运算平台-NVIDIA驱动" class="headerlink" title="一、安装CUDA运算平台+NVIDIA驱动"></a>一、安装CUDA运算平台+NVIDIA驱动</h2><p>这些安装的方法很简单，官方网站有具体的安装过程，这里一步带过</p><p><img src="/image1/CUDA_Instal.jpeg" alt="CUDA安装"></p><p><img src="/image1/NVIDIA_Instal.jpeg" alt="NVIDIA_Instal.jpeg"></p><h3 id="1-1-软件简介"><a href="#1-1-软件简介" class="headerlink" title="1.1 软件简介"></a>1.1 软件简介</h3><h3 id="1-2-安装步骤"><a href="#1-2-安装步骤" class="headerlink" title="1.2 安装步骤"></a>1.2 安装步骤</h3><h2 id="二、安装PyTorch"><a href="#二、安装PyTorch" class="headerlink" title="二、安装PyTorch"></a>二、安装PyTorch</h2><h3 id="2-1-环境简介"><a href="#2-1-环境简介" class="headerlink" title="2.1 环境简介"></a>2.1 环境简介</h3><p>CUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。CUDA™是一种由NVIDIA推出的通用并行计算架构，该架构使GPU能够解决复杂的计算问题。 它包含了CUDA指令集架构（ISA）以及GPU内部的并行计算引擎。 开发人员现在可以使用C语言来为CUDA™架构编写程序，C语言是应用最广泛的一种高级编程语言。所编写出的程序可以在支持CUDA™的处理器上以超高性能运行。CUDA3.0已经开始支持C++和FORTRAN。</p><p>—-来自百度百科</p><p>NVIDIA（纳斯达克股票代码：NVDA）是一家人工智能计算公司  。公司创立于 1993 年，总部位于美国加利福尼亚州圣克拉拉市。Jensen Huang (黄仁勋) 是创始人兼首席执行官。 </p><p>Ultra：Nvidia的旗舰级产品，为本系列中的最强者。</p><p>GTX：其性能介于GTS和Ultra之间。一般为Nvidia首发的高端产品。</p><p>GTS：始终为Nvidia第三强的产品(GeForce 2 GTS与GeForce 8800GTS均可展示出来)，性能处于GTX之下，与GT相比有些模糊。</p><p>GT：频率提升版本”GeForce Technology”的缩写，频率和管线都较LE GS SE XT有较大的提升</p><p>GS：相比GT，渲染管线或者显存位宽的缩减，频率一般在GT之下，并且由于规格限制，性能在GT之下。</p><p>LE:”Limit Edition”的缩写，表示限制版本，代表某一产系列中的入门级产品，主要是频率和规格均与标准版本相比有一定的下降。</p><p>SE：在Nvidia卡中不常出现，与LE相似。</p><p>XT:”Cost Down”表示降频率版本，将标准版的频率降低，部分产品削减了管线。</p><p>由于我在笔记本上安装的，是NVIDIA GeForce 系列，所以不介绍其他的了。</p><p>配有NVIDIA GeForce 系列GPU的台式电脑和笔记本电脑带给用户无法比拟的性能，明快的照片，高清晰的视频回放，和超真实效果的游戏。GeForce 系列的笔记本GPU还包括先进的耗电管理技术，这种技术可以在不过分耗费电池的前提下保证高性能。</p><h3 id="2-2-安装方法"><a href="#2-2-安装方法" class="headerlink" title="2.2 安装方法"></a>2.2 安装方法</h3><p>CUDA安装方法:linux中打开终端按照下面代码这个过程走完就好了<br><a href="https://developer.nvidia.com/cuda-zone" target="_blank" rel="noopener">CUDA 平台网站</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Installation Instructions:</span><br><span class="line">`sudo dpkg -i cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48_1.0-1_amd64.deb`</span><br><span class="line">`sudo apt-key add /var/cuda-repo-&lt;version&gt;/7fa2af80.pub`</span><br><span class="line">`sudo apt-get update`</span><br><span class="line">`sudo apt-get install cuda`</span><br></pre></td></tr></table></figure><p><a href="https://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">NVIDIA驱动</a></p><h3 id="2-3-使用说明"><a href="#2-3-使用说明" class="headerlink" title="2.3 使用说明"></a>2.3 使用说明</h3><h2 id="三、-caffe框架安装"><a href="#三、-caffe框架安装" class="headerlink" title="三、 caffe框架安装"></a>三、 caffe框架安装</h2>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.7 gitbook 插件等相关设置</title>
      <link href="/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-7-gitbook-%E6%8F%92%E4%BB%B6%E7%AD%89%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/"/>
      <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-7-gitbook-%E6%8F%92%E4%BB%B6%E7%AD%89%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了1.7 gitbook 插件等相关设置，解决gitbook不支持latex公式等问题。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="gitbook-插件等相关配置"><a href="#gitbook-插件等相关配置" class="headerlink" title="gitbook 插件等相关配置"></a>gitbook 插件等相关配置</h1><h2 id="插件安装配置方法"><a href="#插件安装配置方法" class="headerlink" title="插件安装配置方法"></a>插件安装配置方法</h2><p>在你gitbook更目录中编辑book.json文件，文件配置好后，不会生效，需要先执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook install  <span class="comment"># 安装命令</span></span><br></pre></td></tr></table></figure><p>然后执行如下命令进行编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook build</span><br></pre></td></tr></table></figure><h2 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h2><ul><li>图和流程图(甘特图之类的)</li></ul><p><a href="https://plugins.gitbook.com/plugin/mermaid" target="_blank" rel="noopener">Mermaid 的 plugins地址</a>, <a href="https://github.com/knsv/mermaid" target="_blank" rel="noopener">Mermaid 的github地址</a></p><p><img src="/image1/Plugins_Mermaid.png" alt="Mermaid"></p><ul><li>安装方法，在book.json加入以下内容，然后gitbook install</li></ul><p>{<br>    “plugins”: [“mermaid”]<br>}</p><p>graph TD;<br>    A–&gt;B;<br>    A–&gt;C;<br>    B–&gt;D;<br>    C–&gt;D;</p><p>classDiagram<br>Class01 &lt;|– AveryLongClass : Cool<br>Class03 <em>– Class04<br>Class05 o– Class06<br>Class07 .. Class08<br>Class09 –&gt; C2 : Where am i?<br>Class09 –</em> C3<br>Class09 –|&gt; Class07<br>Class07 : equals()<br>Class07 : Object[] elementData<br>Class01 : size()<br>Class01 : int chimp<br>Class01 : int gorilla<br>Class08 <--> C2: Cool label</--></p><ul><li>具体使用<a href="https://github.com/knsv/mermaid" target="_blank" rel="noopener">帮助文档请移步github</a></li></ul><h3 id="KaTex"><a href="#KaTex" class="headerlink" title="KaTex"></a>KaTex</h3><p>为了支持数学公式, 我们可以使用KaTex和MathJax插件, 官网上说Katex速度要快于MathJax</p><p><a href="https://plugins.gitbook.com/plugin/katex" target="_blank" rel="noopener">插件地址</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"plugins": [</span><br><span class="line">    <span class="string">"katex"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Inline math: $$\int_&#123;-\infty&#125;^\infty g(x) dx$$</span><br><span class="line"></span><br><span class="line">Block math:</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\int_&#123;-\infty&#125;^\infty g(x) dx</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">Or using the templating syntax:</span><br><span class="line"></span><br><span class="line">&#123;% math %&#125;\int_&#123;-\infty&#125;^\infty g(x) dx&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.6 win10+ubuntu双系统修复ubuntu启动引导</title>
      <link href="/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-6-win10-ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%BF%AE%E5%A4%8Dubuntu%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC/"/>
      <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-6-win10-ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%BF%AE%E5%A4%8Dubuntu%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了win10+ubuntu双系统修复ubuntu启动引导，解决最新版win10系统的UEFI快速启动带来的双系统安装启动问题（开机引导无法修复的解决方法）。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="win10-ubuntu双系统修复ubuntu启动引导"><a href="#win10-ubuntu双系统修复ubuntu启动引导" class="headerlink" title="win10+ubuntu双系统修复ubuntu启动引导"></a>win10+ubuntu双系统修复ubuntu启动引导</h1><h2 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h2><p>我的环境是：uefi启动模式下的win10 + ubutu18.04，其中win10 安装在 128G固态硬盘上，Ubuntu18.04LTS 安装在1T 机械硬盘上，由于我已安装好的ubuntu18 没有UEFI，但是ubuntu18确实是支持UEFI的，难道我必须要重新安装下ubuntu系统吗？（我ubuntu上好不容易安装好了好多软件，此时内心是崩溃的）</p><h2 id="一、啥都不用改的解决办法（有点不推荐）"><a href="#一、啥都不用改的解决办法（有点不推荐）" class="headerlink" title="一、啥都不用改的解决办法（有点不推荐）"></a>一、啥都不用改的解决办法（有点不推荐）</h2><ul><li>每次打开电脑后狂按F12按键，会进入Boot引导管理，然后选择你的Ubuntu系统进入即可打开ubuntu，如果你要打开window10 你可以按下开机电源后啥都不做就能进入，或者，也是狂按F12进入Boot管理界面，选择windows。</li></ul><blockquote><p>每次开机都得这么累，所以不推荐</p></blockquote><h2 id="二、先进入Ubuntu-然后执行如下命令（就是安装Ubuntu的引导修复工具软件）"><a href="#二、先进入Ubuntu-然后执行如下命令（就是安装Ubuntu的引导修复工具软件）" class="headerlink" title="二、先进入Ubuntu 然后执行如下命令（就是安装Ubuntu的引导修复工具软件）"></a>二、先进入Ubuntu 然后执行如下命令（就是安装Ubuntu的引导修复工具软件）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su</span><br><span class="line"><span class="comment"># sudo add-apt-repository ppa:yannubuntu/boot-repair</span></span><br><span class="line"><span class="comment"># apt-get update</span></span><br><span class="line"><span class="comment"># apt-get install boot-repair</span></span><br><span class="line">1.在dash中搜索boot-repair</span><br><span class="line">2.点recommand repair</span><br><span class="line">  之后会自动执行</span><br></pre></td></tr></table></figure><p><img src="/image1/LinuxAndWin10Boot.jpeg" alt="recommand repair"></p><p>执行完以上步骤后会出现如下图所示的信息：</p><p><img src="/image1/LinuxAndWin10Boot2.1.jpeg" alt="执行完后显示"></p><p>然后重启电脑，然后狂按F2,进入BOOT设置界面，设置UEFI 和 Enable。</p><p><img src="/image1/LinuxAndWin10Boot2.2.jpeg" alt="执行完后显示"></p><p>接下来设置个Supervisor密码，注意后期退出并保存这个boot配置时，要重新设置这个密码，新密码直接全敲回车（这样代表不设置密码，面对你以后密码忘记了）如下图：</p><p><img src="/image1/LinuxAndWin10Boot2.3.jpeg" alt="执行完后显示"></p><p>设置密码后，下面灰色的选项就可以用了。此时进入 <strong>Select an UEFI file as trust executing</strong> ,进入的界面如下图</p><p><img src="/image1/LinuxAndWin10Boot2.4.jpeg" alt="执行完后显示"></p><p>||</p><p><img src="/image1/LinuxAndWin10Boot2.5.jpeg" alt="执行完后显示"></p><p>||</p><p><img src="/image1/LinuxAndWin10Boot2.6.jpeg" alt="执行完后显示"></p><p>||</p><p><img src="/image1/LinuxAndWin10Boot2.7.jpeg" alt="执行完后显示"></p><p>接下来，回到Boot设置栏，讲EFI 的Ubuntu 重新排序，排到最高优先级，我这排到了我的windows启动选项的前面的，如果你了解你的windows启动标志，直接放到windows启动选项前也就可以的。</p><p><img src="/image1/LinuxAndWin10Boot2.8.jpeg" alt="执行完后显示"></p><ul><li>到此设置结束，但是不要忘了，把你之前的Security选项里的密码重新清楚掉哦，就是重新设置新密码，新密码内容设置为回车就好了，下次你要使用就会直接提示你输入新密码。</li></ul><p>接下来F10保存并退出。然后启动你的电脑，会直接进入linux的引导界面，还包括了Windows的启动界面选项，这时你想进Ubuntu还是windows都是很好选择的。</p>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.5 Ubuntu下常用工具软件配置安装</title>
      <link href="/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-5-Ubuntu%E4%B8%8B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/"/>
      <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-5-Ubuntu%E4%B8%8B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了Ubuntu下常用工具软件配置、安装，包括高速下载的工具安装使用，具体安装和介绍见文章内容所述。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="Ubuntu下常用工具软件配置安装"><a href="#Ubuntu下常用工具软件配置安装" class="headerlink" title="Ubuntu下常用工具软件配置安装"></a>Ubuntu下常用工具软件配置安装</h1><blockquote><p>终端打开软件，不占用终端的方法是在命令后面加&amp;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo matlab &amp;</span><br></pre></td></tr></table></figure><h2 id="一、安装高速下载工具"><a href="#一、安装高速下载工具" class="headerlink" title="一、安装高速下载工具"></a>一、安装高速下载工具</h2><p>uGet：是一款图形化界面软件， 支持队列下载和恢复下载的功能。uGet官网<br>aira2：是一个命令行下载工具，使用不方便，需要配合其他图形界面的下载软件使用。其下载原理类似于Windows上的迅雷，通过搜索资源、为己所用，而不是仅仅从原始地址这单一资源处下载。<br>uGet采用aria2作为后端，安装aria2插件后可与其进行交互。支持的下载协议包括：HTTP，HTTPS，FTP，BitTorrent和Metalink。</p><hr><p>作者：Geroff<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/fengyulinde/article/details/78309314" target="_blank" rel="noopener">https://blog.csdn.net/fengyulinde/article/details/78309314</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p><h3 id="1-1-安装步骤"><a href="#1-1-安装步骤" class="headerlink" title="1.1 安装步骤"></a>1.1 安装步骤</h3><ul><li>安装 uget aria2</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:plushuang-tw/uget-stable</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install uget aria2</span><br></pre></td></tr></table></figure><h3 id="1-2卸载"><a href="#1-2卸载" class="headerlink" title="1.2卸载"></a>1.2卸载</h3><ul><li>1.如果要移除uGet和aria2，可执行如下命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove --purge uget aria2</span><br></pre></td></tr></table></figure><ul><li>2.移除相应ppa，执行如下步骤 </li></ul><p>先安装ppa-purge</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ppa-purge</span><br></pre></td></tr></table></figure><p>接着删除相应ppa</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ppa-purge ppa:plushuang-tw/uget-stable</span><br></pre></td></tr></table></figure><h3 id="1-3-uGet设置"><a href="#1-3-uGet设置" class="headerlink" title="1.3 uGet设置"></a>1.3 uGet设置</h3><p>如图界面选择插件–&gt; aria2即可，更多的帮助请在终端中输入，aria2c -h即可看到。</p><p><img src="/image1/ubuntuTool_1.1.png" alt="uGet设置"></p>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.4 Latex 排版使用笔记</title>
      <link href="/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-4-Latex-%E6%8E%92%E7%89%88%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-4-Latex-%E6%8E%92%E7%89%88%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了Latex排版相关的语法句法使用，是对latex学习中的一种总结，笔记，具体笔记见文中内容所描述。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="Latex-排版使用笔记"><a href="#Latex-排版使用笔记" class="headerlink" title="Latex 排版使用笔记"></a>Latex 排版使用笔记</h1><h2 id="一、-简单的介绍"><a href="#一、-简单的介绍" class="headerlink" title="一、 简单的介绍"></a>一、 简单的介绍</h2><blockquote><p>LaTeX（LATEX，音译“拉泰赫”）是一种基于ΤΕΧ的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80年代初期开发，利用这种格式，即使使用者没有排版和程序设计的知识也可以充分发挥由TeX所提供的强大功能，能在几天，甚至几小时内生成很多具有书籍质量的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学类文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档。</p></blockquote><blockquote><p>LaTeX 是一款非常优秀的科技论文排版系统，除了编写学术论文、幻灯片、书籍、报告等之外，甚至可以画矢量图。尤其在学术界非常认可，各个主流的学术期刊都提供了相应的 latex 模板。与 word 排版不同，它不是一个所见即所得的编辑器，而是基于许多的规范的 TeX 语法。正是基于此，LaTeX 在使用时可以让作者花更少的时间在文章的格式排版上，而是更关注与内容的编辑。</p></blockquote><h3 id="1-1-TeXLive"><a href="#1-1-TeXLive" class="headerlink" title="1.1 TeXLive"></a>1.1 TeXLive</h3><p>TeXLive 是一款经典的官方发布的 TeX 系统，特点是跨平台（Unix、Linux、Windows 操作系统均可）安装，不断有开发人员在维护和更新，解决BUG。缺点是软件仅仅是一个编译系统，与 CTeX 相比缺少了编译器和查看器，需要另外安装；</p><p>当然也可以不使用编辑软件，直接使用命令行（command line）或记事本编辑，再使用命令行的指令进行编译（latex、pdflatex、bibtex、dvi2ps 等），一般人当然接受不了（只有极少数程序员会这么做），开发也不方便。</p><h3 id="1-2-CTeX"><a href="#1-2-CTeX" class="headerlink" title="1.2 CTeX"></a>1.2 CTeX</h3><blockquote><p>CTeX 环境（适合中国人使用的 Chinese TeX 环境）中文套装是基于 Windows 下的 MiKTeX 系统，集成了编辑器 WinEdt 和 PostScript 处理软件 Ghostscript 和 GSview 等主要工具。 CTeX 中文套装在 MiKTeX 的基础上增加了对中文的完整支持。 </p></blockquote><ul><li>WinEdt 一款 CTeX 自带的编辑软件，并不是免费的软件，需要（和谐）之后才好使用，否则会不断提示你进行 register。</li></ul><p><img src="/image1/Latex_WinEdt.jpeg" alt="Latex_WinEdt"></p><ul><li>WinEdt 提供了许多按钮式的数学符号、运算、字母提示，不需要记忆很多命令； </li></ul><p><img src="/image1/Latex_WinEdt_Formular.jpeg" alt="WinEdt 公式编辑"></p><h3 id="1-3-TexStudio-推荐"><a href="#1-3-TexStudio-推荐" class="headerlink" title="1.3 TexStudio [推荐]"></a>1.3 TexStudio [推荐]</h3><p>TeXstudio 是一款非常精良的 LaTeX 免费开发软件（不包括 TeX 编译环境，需要另外安装 CTeX 或 TeXLive），有着许多实用、便捷的功能：</p><ul><li><p>配置非常简单，基本使用默认的配置即可，个人喜欢修改字体为 Consolas，编译方式 DVI-&gt;PS-&gt;PDF，编码 UTF-8（对中文兼容）、加入英语拼写检查（Spell Check，en_US）；</p></li><li><p>自带 PDF 查看器，即界面左边为编辑文档，右边显示编译生成的 PDF 文档，在 pdflatex 编译之后，支持对象反查（代码 –&gt; PDF（右键 Go to PDF）、PDF–&gt; 代码（右键 Go to Source））；</p></li><li><p>代码自动提示，可以自动补全，菜单里含有丰富的命令； </p></li></ul><p><img src="/image1/Latex_TexStudio_1.jpeg" alt="1"><br><img src="/image1/Latex_TexStudio_2.jpeg" alt="2"><br><img src="/image1/Latex_TexStudio_3.jpeg" alt="3"></p><h2 id="二、Latex基本语法"><a href="#二、Latex基本语法" class="headerlink" title="二、Latex基本语法"></a>二、Latex基本语法</h2><h2 id="三、Latex-在线参考资料"><a href="#三、Latex-在线参考资料" class="headerlink" title="三、Latex 在线参考资料"></a>三、Latex 在线参考资料</h2>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.3 Ubuntu18 git命令使用总结</title>
      <link href="/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-3-Ubuntu18-git%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-3-Ubuntu18-git%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了 Ubuntu18 git命令使用总结，主要包括git的指令使用帮助，本文不是指导如何调试代码和修复代码，具体内容见文中内容所示。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="git-相关命令学习"><a href="#git-相关命令学习" class="headerlink" title="git 相关命令学习"></a>git 相关命令学习</h1><h2 id="一、git-remote-命令用法"><a href="#一、git-remote-命令用法" class="headerlink" title="一、git remote 命令用法"></a>一、<a href="https://www.git-scm.com/docs/git-remote" target="_blank" rel="noopener">git remote 命令用法</a></h2><h3 id="1-1-git-remote-命令用法"><a href="#1-1-git-remote-命令用法" class="headerlink" title="1.1 git remote 命令用法"></a>1.1 <a href="https://www.git-scm.com/docs/git-remote" target="_blank" rel="noopener">git remote 命令用法</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git remote [-v | --verbose]  <span class="comment">#不带参数，列出已经存在的远程分支</span></span><br><span class="line">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;</span><br><span class="line">git remote rename &lt;old&gt; &lt;new&gt;</span><br><span class="line">git remote remove &lt;name&gt;</span><br><span class="line">git remote <span class="built_in">set</span>-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)</span><br><span class="line">git remote <span class="built_in">set</span>-branches [--add] &lt;name&gt; &lt;branch&gt;…​</span><br><span class="line">git remote get-url [--push] [--all] &lt;name&gt;</span><br><span class="line">git remote <span class="built_in">set</span>-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]</span><br><span class="line">git remote <span class="built_in">set</span>-url --add [--push] &lt;name&gt; &lt;newurl&gt;</span><br><span class="line">git remote <span class="built_in">set</span>-url --delete [--push] &lt;name&gt; &lt;url&gt;</span><br><span class="line">git remote [-v | --verbose] show [-n] &lt;name&gt;…​</span><br><span class="line">git remote prune [-n | --dry-run] &lt;name&gt;…​</span><br><span class="line">git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…​]</span><br></pre></td></tr></table></figure><h2 id="二、例程代码"><a href="#二、例程代码" class="headerlink" title="二、例程代码"></a>二、例程代码</h2><h3 id="2-1-例程代码"><a href="#2-1-例程代码" class="headerlink" title="2.1 例程代码"></a>2.1 例程代码</h3><ul><li>查看当前的远程库 </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line">  origin git://github.com/schacon/ticgit.git如果有多个远程仓库,此命令将全部列出.比如在我的 Grit 项目中,可以看到.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote <span class="comment">#不带参数，列出已经存在的远程分支</span></span></span><br><span class="line">  origin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果提示：error: 无法推送一些引用到 <span class="string">'https://github.com/porterpan/gitbook-tutorial.git'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提示：再次推送前，先与远程变更合并（如 <span class="string">'git pull ...'</span>）。详见</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提示：<span class="string">'git push --help'</span> 中的 <span class="string">'Note about fast-forwards'</span> 小节。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge origin/mastergit</span></span><br></pre></td></tr></table></figure><h3 id="正常流程"><a href="#正常流程" class="headerlink" title="正常流程"></a>正常流程</h3><ul><li><p>如果都是自己在开发的类，当然优先使用pull-&gt;commit-&gt;push，为什么我更倾向这种方式呢，因为这样会减少Git没有必要的merge。</p></li><li><p>如果有冲突的情况下，先pull了会出现什么问题呢？<br>如果你的判断失误，在本地修改与远程代码有冲突的情况下，先执行了git-pull，即使是这样也不用担心，git会给你一个错误提示，这时候你再去执行commit-&gt;pull-&gt;push也是没有问题的。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.2 Ubuntu18安装Gitbook</title>
      <link href="/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-2-Ubuntu18%E5%AE%89%E8%A3%85Gitbook/"/>
      <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-2-Ubuntu18%E5%AE%89%E8%A3%85Gitbook/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了 Ubuntu18安装Gitbook的相关步骤，和某些关键的终点输入指令，本文不是指导如何调试代码和修复代码，本文给出了一种安装的方法，具体修复方法见文中内容所示。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="Ubuntu18-安装Gitbook-记录"><a href="#Ubuntu18-安装Gitbook-记录" class="headerlink" title="Ubuntu18 安装Gitbook 记录"></a>Ubuntu18 安装Gitbook 记录</h1><h1 id="1-安装nodejs"><a href="#1-安装nodejs" class="headerlink" title="1. 安装nodejs"></a>1. 安装nodejs</h1><ul><li>进入<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs官网</a>，选择10.15.0 LTS下面的other Downloads.</li></ul><p><img src="https://s2.ax1x.com/2019/01/06/FbSReA.png" alt="FbSReA.png"></p><ul><li>然后进入下载界面</li></ul><p><a href="https://imgchr.com/i/FbpJtP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/06/FbpJtP.md.png" alt="FbpJtP.md.png"></a></p><ul><li>解压，开始安装<blockquote><p>安装就是直接把解压后的放到你想安装的位置，我们直接解压到</p></blockquote></li></ul><p>/usr/local路径中。这就安装好了，不需要运行，直接执行下面步骤。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/node-v4.2.4-linux-x64/bin/node /usr/<span class="built_in">local</span>/bin/node sudo ln -s /usr/<span class="built_in">local</span>/node-v4.2.4-linux-x64/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br></pre></td></tr></table></figure><p>至此nodejs安装完成</p><hr><p>#2. 安装gitbook</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gitbook-cli</span><br></pre></td></tr></table></figure><blockquote><p>之后在终端输入以下命令，否则，你在终端执行 gitbook -V 会提示命令不存在。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/node-v4.2.4-linux-x64/bin/gitbook /usr/<span class="built_in">local</span>/bin/gitbook</span><br><span class="line">gitbook -v <span class="comment"># 输出安装后的版本信息</span></span><br></pre></td></tr></table></figure><ul><li>安装结束然后</li></ul><hr><h1 id="3-Gitbook使用教程"><a href="#3-Gitbook使用教程" class="headerlink" title="3. Gitbook使用教程"></a>3. Gitbook使用教程</h1><h2 id="3-1-gitbook-命令"><a href="#3-1-gitbook-命令" class="headerlink" title="3.1 gitbook 命令"></a>3.1 gitbook 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gitbook -V  检测安装成功 </span><br><span class="line">gitbook init  初始化 </span><br><span class="line">gitbook build  编译当前的生成网页，但是不启动本地服务器</span><br><span class="line">gitbook serve -p 8080 .  编译当前的生成网页，启动本地服务器</span><br><span class="line">gitbook serve .  启动本地服务器</span><br><span class="line">gitbook update  更新软件</span><br></pre></td></tr></table></figure><p>README.md是关于你的书的介绍，而SUMMARY.md中则包含了书目，即章节结构，它的格式大致是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* [第1章](./绪论/c1.md) # 注意章的要顶格写,此处第一章全放在根目录的绪论文件夹中的</span><br><span class="line"> * [第1节](c1s1.md) # 注意节要有空格号</span><br><span class="line"> * [第2节](c1s2.md) # 注意节要有空格号</span><br><span class="line">* [第2章](c2.md) # 注意章的要顶格写</span><br></pre></td></tr></table></figure><p>剩下的东西就很好理解了，你只需要编写相应章节即可。在编辑完README.md和SUMMARY.md后，你可以运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook serve -p 8080 .</span><br></pre></td></tr></table></figure><p>Gitbook首先把你的Markdown文件编译为HTML文件，并根据SUMMARY.md生成书的目录。所有生存的文件都保存在当前目录下的一个名为_book的子目录中。完成这些工作后，Gitbook会作为一个HTTP Server运行，并在8080端口监听HTTP请求。</p><p>运行以上命令后，打开浏览器，在地址栏输入：<a href="http://localhost:8080即可看到你的书页了。" target="_blank" rel="noopener">http://localhost:8080即可看到你的书页了。</a></p><blockquote><p>其中位于左侧书目顶部的Introduction一节就编译自README.md，而书目本身自编译自SUMMARY.md。你要在自己的网站上发布新书，只需把_book目录复制到服务器相应目录即可。至此Gitbook的基本用法就介绍完毕。</p></blockquote><h2 id="3-2-Gitbook的插件支持"><a href="#3-2-Gitbook的插件支持" class="headerlink" title="3.2 Gitbook的插件支持"></a>3.2 Gitbook的插件支持</h2><p>Gitbook可以生成HTML，因此它支持一些外部的JavaScript文件嵌入到HTML中，例如Google统计、Disqus评论系统等。以下以页面中嵌入Disqus评论为例。</p><p>首先是安装Gitbook的Disqus插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gitbook-plugin-disqus</span><br><span class="line"></span><br><span class="line">或者先写好book.json 然后执行</span><br><span class="line">gitbook install #推荐这种方法</span><br></pre></td></tr></table></figure><p>然后建立一个book.json文件，其格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [&quot;disqus&quot;],</span><br><span class="line">  &quot;pluginsConfig&quot;: &#123;</span><br><span class="line">    &quot;disqus&quot;: &#123;</span><br><span class="line">      &quot;shortName&quot;: &quot;NAME-FROM-DISQUS&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把上面的 NAME-FROM-DISQUS 修改为你在Disqus上的项目名即可。</p><p>要卸载的话（假如我要卸载的插件是：gitchinese-video），执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall gitchinese-video</span><br></pre></td></tr></table></figure><p>再次运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook serve -p 8080 .</span><br></pre></td></tr></table></figure><p>并刷新浏览器，即可看到附加了Disqus评论的页面。</p><h2 id="3-3-生成图书"><a href="#3-3-生成图书" class="headerlink" title="3.3 生成图书"></a>3.3 生成图书</h2><p>当你在自己的电脑上编辑好图书之后，你可以使用Gitbook<br>的命令行进行本地预览：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook serve .</span><br></pre></td></tr></table></figure><p>然后浏览器中输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以预览生成的以网页形式组织的书籍。<br>这里你会发现，你在你的图书项目的目录中多了一个名为<br>_book的文件目录，而这个目录中的文件，即是生成的静态网站内容。<br>使用build参数生成到指定目录<br>与直接预览生成的静态网站文件不一样的是，使用这个命令，<br>你可以将内容输入到你所想要的目录中去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /tmp/gitbook</span><br><span class="line">$ gitbook build --output=/tmp/gitbook</span><br></pre></td></tr></table></figure><h2 id="3-4-输出PDF文件"><a href="#3-4-输出PDF文件" class="headerlink" title="3.4 输出PDF文件"></a>3.4 输出PDF文件</h2><p>输入为PDF文件，需要先使用NPM安装上gitbook pdf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install gitbook-pdf -g</span><br></pre></td></tr></table></figure><hr><h1 id="4-更多的gitbook-插件支持请访问-gitbook官方插件库"><a href="#4-更多的gitbook-插件支持请访问-gitbook官方插件库" class="headerlink" title="4 更多的gitbook 插件支持请访问 gitbook官方插件库"></a>4 更多的gitbook 插件支持请访问 <a href="https://plugins.gitbook.com/" target="_blank" rel="noopener">gitbook官方插件库</a></h1><p><a href="https://blog.csdn.net/feosun/article/details/72806825" target="_blank" rel="noopener">参考来源</a></p>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.1 Ubuntu18下有道词典的配置</title>
      <link href="/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-1-Ubuntu18%E4%B8%8B%E6%9C%89%E9%81%93%E8%AF%8D%E5%85%B8%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-Linux%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE-1-1-Ubuntu18%E4%B8%8B%E6%9C%89%E9%81%93%E8%AF%8D%E5%85%B8%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li></ul><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了ubuntu 17+，Debian 等新版本的linux系统中有道词典不能安装的问题修复，由于官方提供的deb安装文件，可以解包调试，会发现Qt5版本低的原因导致的出错，本文不是指导如何调试代码和修复代码，本文给出了一种修复的方法，具体修复方法见文中内容所示。</p><p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p><a id="more"></a><h1 id="有道词典解包dep，修改源码接着玩"><a href="#有道词典解包dep，修改源码接着玩" class="headerlink" title="有道词典解包dep，修改源码接着玩"></a>有道词典解包dep，修改源码接着玩</h1><h2 id="Ubnutu18-安装有道词典"><a href="#Ubnutu18-安装有道词典" class="headerlink" title="Ubnutu18 安装有道词典"></a>Ubnutu18 安装有道词典</h2><ul><li>若要成功安装Ubuntu18下的有道词典，请移步大牛的仓库，配置下就好</li></ul><p><a href="https://github.com/yomun/youdaodict_5.5" target="_blank" rel="noopener">大牛Ubuntu16后都支持的有道词典安装包和安装方法</a>,这个支持Qt5.5 到我的是Qt5.9也支持，貌似以后版本这个可能也支持的，移步去安装吧。</p><blockquote><p>提示，建议你不要开有道词典的划词，因为会卡死你，太占内存了，你ps下会发现好多的啊，全是ORC识别的进程<strong>tesseract 进程</strong>,就是这句话</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装ORC插件，支持有道划词，桌面翻译功能</span></span><br><span class="line">apt install tesseract-ocr tesseract-ocr-eng tesseract-ocr-chi-sim tesseract-ocr-chi-tra</span><br></pre></td></tr></table></figure><ul><li>说实话，不知道怎么生成那么多进程，卡死了，所以我没装这个插件，也没用划词，划词我直接浏览器安装插件解决。仅供参考。</li></ul><hr><blockquote><p>本来准备安装有道云笔记的，但是我的linux是ubuntu18的Qt是5.9 用不了啊，他的Qt是哪个版本的没弄清楚，好像是5.4的，结果就是我安装不上，做这个笔记就是为了想办法重新改写他的源码看看能不能好点支持。</p></blockquote><p><a href="https://blog.csdn.net/wangxiao7474/article/details/61196238?utm_source=blogxgwz4" target="_blank" rel="noopener">文章参考来源</a></p><hr><p>该版本依赖于python3，需要如下依赖包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Depends: python3, python3-pyqt5, python3-requests, python3-xlib, tesseract-ocr, tesseract-ocr-eng, tesseract-ocr-chi-sim, tesseract-ocr-chi-tra, python3-pil, ttf-wqy-microhei, python3-lxml, python3-xdg, python3-pyqt5.qtmultimedia, python3-pyqt5.qtquick, python3-pyqt5.qtwebkit, gir1<span class="number">.2</span>-appindicator3<span class="number">-0.1</span>, python3-dbus, qtdeclarative5-controls-plugin, libqt5multimedia5-plugins,gstreamer0<span class="number">.10</span>-plugins-ugly</span><br></pre></td></tr></table></figure><ul><li>Ok， 没有条件我们开始创造条件</li></ul><h3 id="第一步、下载有道词典的dep包"><a href="#第一步、下载有道词典的dep包" class="headerlink" title="第一步、下载有道词典的dep包"></a>第一步、下载有道词典的dep包</h3><p>进入官网，然后选择ubuntu的包下载</p><blockquote><p>下载的是deb包，文件名为：youdao-dict_1.1.0-0-ubuntu_amd64.deb 。</p></blockquote><h3 id="第二步、解包"><a href="#第二步、解包" class="headerlink" title="第二步、解包"></a>第二步、解包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#解压deb包到youdao-dict目录</span><br><span class="line">dpkg -X youdao-dict_1.1.0-0-ubuntu_amd64.deb  youdao-dict</span><br><span class="line">#解压deb包中的control信息，control中写有该软件的依赖信息</span><br><span class="line">dpkg -e youdao-dict_1.1.0-0-ubuntu_amd64.deb youdao-dict/DEBIAN</span><br></pre></td></tr></table></figure><h3 id="第三步、修改"><a href="#第三步、修改" class="headerlink" title="第三步、修改"></a>第三步、修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd youdao-dict</span><br><span class="line">cd DEBIAN</span><br><span class="line">vim control</span><br><span class="line">#进入解压目录，编辑control文件，删除文件中Depends：后面的gstreamer0.10-plugins-ugly，并保存</span><br></pre></td></tr></table></figure><p>[v] 接着就是修改工程中的源码</p><p>[v] 接着就是保存修改</p><h3 id="第四步、重新打包"><a href="#第四步、重新打包" class="headerlink" title="第四步、重新打包"></a>第四步、重新打包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/下载</span><br><span class="line">#将修改后的安装文件重新打包</span><br><span class="line">dpkg-deb -b youdao-dict youdao-dict_new.deb</span><br></pre></td></tr></table></figure><p>第五步、重新安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#安装重新打包的deb包</span><br><span class="line">sudo dpkg -i youdao-dict_new.deb</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
